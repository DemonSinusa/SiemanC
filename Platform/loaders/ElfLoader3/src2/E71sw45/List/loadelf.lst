##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Oct/2016  22:27:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  H:\aveman\SiemanC-git\Platform\loaders\ElfLoader3\sr #
#                       c2\loader3\loadelf.c                                 #
#    Command line    =  H:\aveman\SiemanC-git\Platform\loaders\ElfLoader3\sr #
#                       c2\loader3\loadelf.c -D NDEBUG -D NEWSGOLD -D ELKA   #
#                       -lC H:\aveman\SiemanC-git\Platform\loaders\ElfLoader #
#                       3\src2\E71sw45\List\ -o H:\aveman\SiemanC-git\Platfo #
#                       rm\loaders\ElfLoader3\src2\E71sw45\Obj\ -s9          #
#                       --no_unroll --cpu_mode thumb --endian little --cpu   #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None -I ..\dev\include\ -I H:\aveman\IAR\ARM\INC\    #
#                       --inline_threshold=2                                 #
#    List file       =  H:\aveman\SiemanC-git\Platform\loaders\ElfLoader3\sr #
#                       c2\E71sw45\List\loadelf.lst                          #
#    Object file     =  H:\aveman\SiemanC-git\Platform\loaders\ElfLoader3\sr #
#                       c2\E71sw45\Obj\loadelf.r79                           #
#                                                                            #
#                                                                            #
##############################################################################

H:\aveman\SiemanC-git\Platform\loaders\ElfLoader3\src2\loader3\loadelf.c
      1          
      2          /*
      3           * Этот файл является частью программы ElfLoader
      4           * Copyright (C) 2011 by Z.Vova, Ganster
      5           * Licence: GPLv3
      6           */
      7          
      8          
      9          #include "loader.h"
     10          
     11          #ifdef __thumb_mode
     12          extern __arm void *memcpy_a (void *dest, const void *src, size_t size);
     13          extern __arm char * strrchr_a (const char *s, int c);
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          __arm void SUBPROC_a(void *elf, void *param)
     16          {
   \                     SUBPROC_a:
   \   00000000   00402DE9           PUSH     {LR}
     17            SUBPROC(elf, param);
   \   00000004   710100EF           SWI      +369
     18          }
   \   00000008   0080BDE8           POP      {PC}             ;; return
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          __arm unsigned int AddrLibrary_a()
     21          {
   \                     AddrLibrary_a:
   \   00000000   00402DE9           PUSH     {LR}
     22            return AddrLibrary();
   \   00000004   FF8000EF           SWI      +33023
   \   00000008   0080BDE8           POP      {PC}             ;; return
     23          }
     24          
     25          #else
     26          #define memcpy_a memcpy
     27          #define SUBPROC_a SUBPROC
     28          #define AddrLibrary_a AddrLibrary
     29          #define strrchr_a strrchr
     30          #endif
     31          
     32          
     33          // Загрузка эльфа

   \                                 In segment CODE, align 4, keep-with-next
     34          __arch Elf32_Exec* elfopen(const char* filename)
     35          {
   \                     elfopen:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
     36            int fp;
     37            Elf32_Ehdr ehdr;
     38            Elf32_Exec* ex;
     39          
     40            if((fp = fopen(filename, A_ReadOnly | A_BIN,P_READ,&ferr)) == -1) return 0;
   \   00000002   304D               LDR      R5,??elfopen_0   ;; ferr
   \   00000004   8FB0               SUB      SP,SP,#+60
   \   00000006   2B00               MOVS     R3,R5
   \   00000008   8022               MOVS     R2,#+128
   \   0000000A   1102               LSLS     R1,R2,#+8
   \   0000000C   0ADF               SVC      +10
   \   0000000E   0090               STR      R0,[SP, #+0]
   \   00000010   0026               MOVS     R6,#+0
   \   00000012   F643               MVNS     R6,R6
   \   00000014   B042               CMP      R0,R6
   \   00000016   52D0               BEQ      ??elfopen_1
     41          
     42            if(fread(fp, &ehdr, sizeof(Elf32_Ehdr), &ferr) == sizeof(Elf32_Ehdr))
   \                     ??elfopen_2:
   \   00000018   0027               MOVS     R7,#+0
   \   0000001A   2B00               MOVS     R3,R5
   \   0000001C   3422               MOVS     R2,#+52
   \   0000001E   02A9               ADD      R1,SP,#+8
   \   00000020   0BDF               SVC      +11
   \   00000022   3428               CMP      R0,#+52
   \   00000024   46D1               BNE      ??elfopen_3
     43            {
     44              if( !CheckElf(&ehdr) )
   \   00000026   02A8               ADD      R0,SP,#+8
   \   00000028   ........           _BLF     CheckElf,??CheckElf??rT
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   41D1               BNE      ??elfopen_3
     45              {
     46                ex = malloc(sizeof(Elf32_Exec));
   \   00000030   EC20               MOVS     R0,#+236
   \   00000032   14DF               SVC      +20
   \   00000034   0400               MOVS     R4,R0
     47          
     48                if(ex)
   \   00000036   3DD0               BEQ      ??elfopen_3
     49                {
     50                  memcpy_a(&ex->ehdr, &ehdr, sizeof(Elf32_Ehdr));
   \   00000038   3422               MOVS     R2,#+52
   \   0000003A   02A9               ADD      R1,SP,#+8
   \   0000003C   0830               ADDS     R0,R0,#+8
   \   0000003E   ........           _BLF     memcpy_a,??memcpy_a??rT
     51                  ex->v_addr = (unsigned int)-1;
   \   00000042   E663               STR      R6,[R4, #+60]
     52                  ex->fp = fp;
   \   00000044   0098               LDR      R0,[SP, #+0]
   \   00000046   2600               MOVS     R6,R4
   \   00000048   C836               ADDS     R6,R6,#+200
   \   0000004A   F060               STR      R0,[R6, #+12]
     53                  ex->body = 0;
   \   0000004C   2760               STR      R7,[R4, #+0]
   \   0000004E   4020               MOVS     R0,#+64
   \   00000050   0121               MOVS     R1,#+1
   \   00000052   2154               STRB     R1,[R4, R0]
     54                  ex->type = EXEC_ELF;
     55                  ex->libs = 0;
   \   00000054   B760               STR      R7,[R6, #+8]
     56                  ex->hashtab = 0;
   \   00000056   3760               STR      R7,[R6, #+0]
     57                  ex->complete = 0;
   \   00000058   3774               STRB     R7,[R6, #+16]
     58          	ex->__is_ex_import = 0;
   \   0000005A   7774               STRB     R7,[R6, #+17]
     59                  ex->meloaded = 0;
   \   0000005C   7761               STR      R7,[R6, #+20]
     60                  ex->switab = (int*)AddrLibrary_a();
   \   0000005E   ........           BLX      AddrLibrary_a
   \   00000062   B061               STR      R0,[R6, #+24]
     61          	ex->fname = filename;
   \   00000064   0F98               LDR      R0,[SP, #+60]
     62          	
     63          	const char *p = strrchr_a(filename, '\\'); 
   \   00000066   5C21               MOVS     R1,#+92
   \   00000068   F061               STR      R0,[R6, #+28]
   \   0000006A   0F98               LDR      R0,[SP, #+60]
   \   0000006C   ........           _BLF     strrchr_a,??strrchr_a??rT
     64          	if(p)
   \   00000070   0028               CMP      R0,#+0
   \   00000072   0ED0               BEQ      ??elfopen_4
     65          	{
     66                    ++p;
     67          	  ex->temp_env = malloc(p - filename + 2);
   \   00000074   0F99               LDR      R1,[SP, #+60]
   \   00000076   401C               ADDS     R0,R0,#+1
   \   00000078   401A               SUBS     R0,R0,R1
   \   0000007A   0190               STR      R0,[SP, #+4]
   \   0000007C   801C               ADDS     R0,R0,#+2
   \   0000007E   14DF               SVC      +20
   \   00000080   3062               STR      R0,[R6, #+32]
     68          	  memcpy_a(ex->temp_env, filename, p - filename);
   \   00000082   019A               LDR      R2,[SP, #+4]
   \   00000084   0F99               LDR      R1,[SP, #+60]
   \   00000086   ........           _BLF     memcpy_a,??memcpy_a??rT
     69          	  ex->temp_env[p - filename] = 0;
   \   0000008A   0198               LDR      R0,[SP, #+4]
   \   0000008C   316A               LDR      R1,[R6, #+32]
   \   0000008E   0F54               STRB     R7,[R1, R0]
   \   00000090   00E0               B        ??elfopen_5
     70          	} else
     71          	  ex->temp_env = 0;
   \                     ??elfopen_4:
   \   00000092   3762               STR      R7,[R6, #+32]
     72          	  
     73          	
     74          	
     75                  if(!LoadSections(ex))
   \                     ??elfopen_5:
   \   00000094   2000               MOVS     R0,R4
   \   00000096   ........           _BLF     LoadSections,??LoadSections??rT
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   07D1               BNE      ??elfopen_6
     76                  {
     77                    ex->complete = 1;
   \   0000009E   0120               MOVS     R0,#+1
   \   000000A0   3074               STRB     R0,[R6, #+16]
     78                    fclose(fp, &ferr);
   \   000000A2   0098               LDR      R0,[SP, #+0]
   \   000000A4   2900               MOVS     R1,R5
   \   000000A6   0DDF               SVC      +13
     79          	  ex->fname = 0;
   \   000000A8   F761               STR      R7,[R6, #+28]
     80                    return ex;
   \   000000AA   2000               MOVS     R0,R4
   \   000000AC   08E0               B        ??elfopen_7
     81                  }
     82                  else
     83                      elfclose(ex);
   \                     ??elfopen_6:
   \   000000AE   2000               MOVS     R0,R4
   \   000000B0   ........           BL       elfclose
     84                }
     85              }
     86            }
     87            ex->fname = 0;
   \                     ??elfopen_3:
   \   000000B4   E434               ADDS     R4,R4,#+228
   \   000000B6   2760               STR      R7,[R4, #+0]
     88            fclose(fp, &ferr);
   \   000000B8   0098               LDR      R0,[SP, #+0]
   \   000000BA   2900               MOVS     R1,R5
   \   000000BC   0DDF               SVC      +13
     89            return 0;
   \                     ??elfopen_1:
   \   000000BE   0020               MOVS     R0,#+0
   \                     ??elfopen_7:
   \   000000C0   10B0               ADD      SP,SP,#+64
   \   000000C2   F0BD               POP      {R4-R7,PC}       ;; return
   \                     ??elfopen_0:
   \   000000C4   ........           DC32     ferr
     90          }
     91          
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93          __arch void *elf_entry(Elf32_Exec *ex)
     94          {
     95              if(!ex) return 0;
   \                     elf_entry:
   \   00000000   0028               CMP      R0,#+0
   \   00000002   00D1               BNE      ??elf_entry_0
   \   00000004   7047               BX       LR
     96              return ( ex->body + ex->ehdr.e_entry - ex->v_addr );
   \                     ??elf_entry_0:
   \   00000006   C16B               LDR      R1,[R0, #+60]
   \   00000008   4A42               RSBS     R2,R1,#+0
   \   0000000A   016A               LDR      R1,[R0, #+32]
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   4018               ADDS     R0,R0,R1
   \   00000010   8018               ADDS     R0,R0,R2
   \   00000012   7047               BX       LR
     97          }
     98          
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          __arch int elfclose(Elf32_Exec* ex)
    101          {
   \                     elfclose:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    102            if(!ex) return E_EMPTY;
   \   00000004   01D1               BNE      ??elfclose_0
   \   00000006   0720               MOVS     R0,#+7
   \   00000008   70BD               POP      {R4-R6,PC}
    103          
    104            if(ex->complete)
   \                     ??elfclose_0:
   \   0000000A   2500               MOVS     R5,R4
   \   0000000C   C835               ADDS     R5,R5,#+200
   \   0000000E   287C               LDRB     R0,[R5, #+16]
   \   00000010   0028               CMP      R0,#+0
   \   00000012   0ED0               BEQ      ??elfclose_1
    105              run_FINI_Array(ex);
   \   00000014   2000               MOVS     R0,R4
   \   00000016   ........           _BLF     run_FINI_Array,??run_FINI_Array??rT
   \   0000001A   0AE0               B        ??elfclose_1
    106            
    107            // Закрываем либы
    108            while(ex->libs)
    109            {
    110              Libs_Queue* lib = ex->libs;
    111              sub_clients(lib->lib);
   \                     ??elfclose_2:
   \   0000001C   3068               LDR      R0,[R6, #+0]
   \   0000001E   ........           _BLF     sub_clients,??sub_clients??rT
    112              CloseLib(lib->lib, 0);
   \   00000022   3068               LDR      R0,[R6, #+0]
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   ........           _BLF     CloseLib,??CloseLib??rT
    113              ex->libs = lib->next;
   \   0000002A   7068               LDR      R0,[R6, #+4]
   \   0000002C   A860               STR      R0,[R5, #+8]
    114              mfree(lib);
   \   0000002E   3000               MOVS     R0,R6
   \   00000030   15DF               SVC      +21
    115            }
   \                     ??elfclose_1:
   \   00000032   AE68               LDR      R6,[R5, #+8]
   \   00000034   002E               CMP      R6,#+0
   \   00000036   F1D1               BNE      ??elfclose_2
    116          
    117            if(ex->hashtab) mfree(ex->hashtab);
   \   00000038   2868               LDR      R0,[R5, #+0]
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   00D0               BEQ      ??elfclose_3
   \   0000003E   15DF               SVC      +21
    118            if(ex->body) mfree(ex->body);
   \                     ??elfclose_3:
   \   00000040   2068               LDR      R0,[R4, #+0]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   00D0               BEQ      ??elfclose_4
   \   00000046   15DF               SVC      +21
    119            if(ex->temp_env) mfree(ex->temp_env);
   \                     ??elfclose_4:
   \   00000048   286A               LDR      R0,[R5, #+32]
   \   0000004A   0028               CMP      R0,#+0
   \   0000004C   00D0               BEQ      ??elfclose_5
   \   0000004E   15DF               SVC      +21
    120            mfree(ex);
   \                     ??elfclose_5:
   \   00000050   2000               MOVS     R0,R4
   \   00000052   15DF               SVC      +21
    121            return E_NO_ERROR;
   \   00000054   0020               MOVS     R0,#+0
   \   00000056   70BD               POP      {R4-R6,PC}       ;; return
    122          }
    123          
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          __arch int sub_elfclose(Elf32_Exec* ex)
    126          {
   \                     sub_elfclose:
   \   00000000   00B5               PUSH     {LR}
    127            //elfclose(ex);
    128            SUBPROC_a((void*)elfclose, ex);
   \   00000002   0100               MOVS     R1,R0
   \   00000004   0248               LDR      R0,??sub_elfclose_0  ;; elfclose
   \   00000006   ........           BLX      SUBPROC_a
    129            return 0;
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   00BD               POP      {PC}             ;; return
   \   0000000E   C046               Nop      
   \                     ??sub_elfclose_0:
   \   00000010   ........           DC32     elfclose
    130          }
    131          
    132          

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     AddrLibrary_a     4
     SUBPROC_a         4
     elf_entry         4
     elfclose         16
     elfopen          84
     sub_elfclose      4


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     SUBPROC_a        12
     AddrLibrary_a    12
     elfopen         200
     elf_entry        20
     elfclose         88
     sub_elfclose     20
      Others          96

 
 448 bytes in segment CODE
 
 352 bytes of CODE memory (+ 96 bytes shared)

Errors: none
Warnings: none
