##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    25/Nov/2013  17:49:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\env.c #
#    Command line    =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\env.c #
#                        -D NDEBUG -D NEWSGOLD -D ELKA -lC                   #
#                       E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\List\ #
#                        -o E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\O #
#                       bj\ -s9 --no_unroll --cpu_mode thumb --endian        #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "E:\iar\Embedded Workbench 4.0      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\List\ #
#                       env.lst                                              #
#    Object file     =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\Obj\e #
#                       nv.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\env.c
      1          
      2          #include "loader.h"

  #define ELF32_ST_BIND(x)        ELF_ST_BIND(x)
          ^
"E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\elf.h",554  Warning[Pe047]: 
          incompatible redefinition of macro "ELF32_ST_BIND" (declared at line
          356)

  #define ELF32_ST_TYPE(x)        ELF_ST_TYPE(x)
          ^
"E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\elf.h",555  Warning[Pe047]: 
          incompatible redefinition of macro "ELF32_ST_TYPE" (declared at line
          357)
      3          
      4          

   \                                 In segment DATA_Z, align 4, align-sorted
      5          char **l__environ = 0;
   \                     l__environ:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
      6          static char **l_last_environ = 0;
      7          
      8          
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          __arm char *
     11          strchrnul (const char *s, int c_in)
     12          {
     13            while( *++s != c_in && *s);
   \                     strchrnul:
   \                     ??strchrnul_0:
   \   00000000   0120F0E5           LDRB     R2,[R0, #+1]!
   \   00000004   010052E1           CMP      R2,R1
   \   00000008   00005213           CMPNE    R2,#+0
   \   0000000C   FBFFFF1A           BNE      ??strchrnul_0
     14            
     15            return (char*)s;
   \   00000010   1EFF2FE1           BX       LR               ;; return
     16          }
     17          
     18          /* This function is used by `setenv' and `putenv'.  The difference between
     19             the two functions is that for the former must create a new string which
     20             is then placed in the environment, while the argument of `putenv'
     21             must be used directly.  This is all complicated by the fact that we try
     22             to reuse values once generated for a `setenv' call since we can never
     23             free the strings. [in uclibc, we do not]  */

   \                                 In segment CODE, align 4, keep-with-next
     24          __arm static int __add_to_environ(const char *name, const char *value,
     25           		int replace)
     26          {
   \                     __add_to_environ:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
     27          	register char **ep;
     28          	register size_t size;
     29          	char *var_val;
     30          	char **new_environ;
     31          	/* name may come from putenv() and thus may contain "=VAL" part */
     32          	const size_t namelen = strchrnul(name, '=') - name;
     33          	int rv = -1;
     34          
     35          	/* We have to get the pointer now that we have the lock and not earlier
     36          	   since another thread might have created a new environment.  */
     37          	ep = l__environ;
   \   00000004   ........           LDR      R8,??DataTable3  ;; l__environ
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   3D10A0E3           MOV      R1,#+61
   \   00000014   ........           BL       strchrnul
   \   00000018   00B098E5           LDR      R11,[R8, #+0]
   \   0000001C   046040E0           SUB      R6,R0,R4
   \   00000020   0070E0E3           MVN      R7,#+0
     38          
     39          	size = 0;
   \   00000024   0090A0E3           MOV      R9,#+0
   \   00000028   00A0A0E3           MOV      R10,#+0
     40          	if (ep != NULL) {
   \   0000002C   00005BE3           CMP      R11,#+0
   \   00000030   2C00001A           BNE      ??__add_to_environ_0
     41          		while (*ep != NULL) {
     42          			if (!strncmp(*ep, name, namelen) && (*ep)[namelen] == '=') {
     43          				/* Found */
     44          				if (!replace)
     45          					goto DONE_OK;
     46          				goto REPLACE;
     47          			}
     48          			++size;
     49          			++ep;
     50          		}
     51          	}
     52          
     53          	/* Not found, add at the end */
     54          
     55          	/* We allocated this space; we can extend it.  */
     56          	new_environ = realloc(l_last_environ, (size + 2) * sizeof(char *));
   \                     ??__add_to_environ_1:
   \   00000034   02008AE2           ADD      R0,R10,#+2
   \   00000038   0011A0E1           LSL      R1,R0,#+2
   \   0000003C   040098E5           LDR      R0,[R8, #+4]
   \   00000040   BA0000EF           SWI      +186
   \   00000044   00B0B0E1           MOVS     R11,R0
     57          	if (new_environ == NULL) {
   \   00000048   2200000A           BEQ      ??__add_to_environ_2
     58          		//__set_errno(ENOMEM);
     59          		goto DONE;
     60          	}
     61          	if (l__environ != l_last_environ) {
   \   0000004C   001098E5           LDR      R1,[R8, #+0]
   \   00000050   040098E5           LDR      R0,[R8, #+4]
   \   00000054   000051E1           CMP      R1,R0
   \   00000058   0200000A           BEQ      ??__add_to_environ_3
     62          		memcpy(new_environ, l__environ, size * sizeof(char *));
   \   0000005C   0A21A0E1           LSL      R2,R10,#+2
   \   00000060   0B00A0E1           MOV      R0,R11
   \   00000064   1E0100EF           SWI      +286
     63          	}
     64          	l_last_environ = l__environ = new_environ;
   \                     ??__add_to_environ_3:
   \   00000068   00B088E5           STR      R11,[R8, #+0]
   \   0000006C   0B00A0E1           MOV      R0,R11
   \   00000070   040088E5           STR      R0,[R8, #+4]
     65          
     66          	ep = &new_environ[size];
   \   00000074   0AB18BE0           ADD      R11,R11,R10, LSL #+2
     67          	/* Ensure env is NULL terminated in case malloc below fails */
     68          	ep[0] = NULL;
   \   00000078   00908BE5           STR      R9,[R11, #+0]
     69          	ep[1] = NULL;
   \   0000007C   04908BE5           STR      R9,[R11, #+4]
     70          
     71           REPLACE:
     72          	var_val = (char*) name;
   \                     ??__add_to_environ_4:
   \   00000080   0490A0E1           MOV      R9,R4
     73          	if (value != NULL) {
   \   00000084   000055E3           CMP      R5,#+0
   \   00000088   1000000A           BEQ      ??__add_to_environ_5
     74          		const size_t vallen = strlen(value) + 1;
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   1B0000EF           SWI      +27
   \   00000094   018080E2           ADD      R8,R0,#+1
     75          
     76          		var_val = malloc(namelen + 1 + vallen);
   \   00000098   060088E0           ADD      R0,R8,R6
   \   0000009C   010080E2           ADD      R0,R0,#+1
   \   000000A0   140000EF           SWI      +20
   \   000000A4   0090B0E1           MOVS     R9,R0
     77          		if (var_val == NULL) {
   \   000000A8   0A00000A           BEQ      ??__add_to_environ_2
     78          			//__set_errno(ENOMEM);
     79          			goto DONE;
     80          		}
     81          		memcpy(var_val, name, namelen);
   \   000000AC   0620A0E1           MOV      R2,R6
   \   000000B0   0410A0E1           MOV      R1,R4
   \   000000B4   1E0100EF           SWI      +286
     82          		var_val[namelen] = '=';
   \   000000B8   090086E0           ADD      R0,R6,R9
   \   000000BC   3D10A0E3           MOV      R1,#+61
   \   000000C0   ........           STRB     R1,[R0], #+1
     83          		memcpy(&var_val[namelen + 1], value, vallen);
   \   000000C4   0820A0E1           MOV      R2,R8
   \   000000C8   0510A0E1           MOV      R1,R5
   \   000000CC   1E0100EF           SWI      +286
     84          	}
     85          	*ep = var_val;
   \                     ??__add_to_environ_5:
   \   000000D0   00908BE5           STR      R9,[R11, #+0]
     86          
     87           DONE_OK:
     88          	rv = 0;
   \                     ??__add_to_environ_6:
   \   000000D4   0070A0E3           MOV      R7,#+0
     89          
     90           DONE:
     91          
     92          	return rv;
   \                     ??__add_to_environ_2:
   \   000000D8   0700A0E1           MOV      R0,R7
   \   000000DC   F28FBDE8           POP      {R1,R4-R11,PC}   ;; return
   \                     ??__add_to_environ_7:
   \   000000E0   01A08AE2           ADD      R10,R10,#+1
   \   000000E4   04B08BE2           ADD      R11,R11,#+4
   \                     ??__add_to_environ_0:
   \   000000E8   00009BE5           LDR      R0,[R11, #+0]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   CFFFFF0A           BEQ      ??__add_to_environ_1
   \   000000F4   0620A0E1           MOV      R2,R6
   \   000000F8   0410A0E1           MOV      R1,R4
   \   000000FC   150100EF           SWI      +277
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   F5FFFF1A           BNE      ??__add_to_environ_7
   \   00000108   00009BE5           LDR      R0,[R11, #+0]
   \   0000010C   0000D6E7           LDRB     R0,[R6, +R0]
   \   00000110   3D0050E3           CMP      R0,#+61
   \   00000114   F1FFFF1A           BNE      ??__add_to_environ_7
   \   00000118   00009DE5           LDR      R0,[SP, #+0]
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   D6FFFF1A           BNE      ??__add_to_environ_4
   \   00000124   EAFFFFEA           B        ??__add_to_environ_6
     93          }
     94          
     95          

   \                                 In segment CODE, align 4, keep-with-next
     96          __arm int setenv(const char *name, const char *value, int replace)
     97          {
     98          	/* NB: setenv("VAR", NULL, 1) inserts "VAR=" string */
     99          	return __add_to_environ(name, value ? value : "", replace);
   \                     setenv:
   \   00000000   000051E3           CMP      R1,#+0
   \   00000004   00108F02           ADREQ    R1,??setenv_0    ;; ""
   \   00000008   ........           B        __add_to_environ  ;; tailcall
   \                     ??setenv_0:
   \   0000000C   00000000           DC8      "",+0,+0,+0
    100          }
    101          
    102          

   \                                 In segment CODE, align 4, keep-with-next
    103          __arm int unsetenv(const char *name)
    104          {
   \                     unsetenv:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    105          	const char *eq;
    106          	size_t len;
    107          	char **ep;
    108          
    109          	if (name == NULL || *name == '\0'
    110          	 || *(eq = strchrnul(name, '=')) == '='
    111          	) {
   \   00000008   0000D415           LDRBNE   R0,[R4, #+0]
   \   0000000C   00005013           CMPNE    R0,#+0
   \   00000010   0500000A           BEQ      ??unsetenv_0
   \   00000014   3D10A0E3           MOV      R1,#+61
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       strchrnul
   \   00000020   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000024   3D0051E3           CMP      R1,#+61
   \   00000028   0100001A           BNE      ??unsetenv_1
    112          		//__set_errno(EINVAL);
    113          		return -1;
   \                     ??unsetenv_0:
   \   0000002C   0000E0E3           MVN      R0,#+0
   \   00000030   7080BDE8           POP      {R4-R6,PC}
    114          	}
    115          	len = eq - name; /* avoiding strlen this way */
   \                     ??unsetenv_1:
   \   00000034   045040E0           SUB      R5,R0,R4
    116          
    117          	ep = l__environ;
   \   00000038   ........           LDR      R0,??DataTable3  ;; l__environ
   \   0000003C   006090E5           LDR      R6,[R0, #+0]
    118          	/* NB: clearenv(); unsetenv("foo"); should not segfault */
    119          	if (ep)	while (*ep != NULL) {
   \   00000040   000056E3           CMP      R6,#+0
   \   00000044   0700001A           BNE      ??unsetenv_2
    120          		if (!strncmp(*ep, name, len) && (*ep)[len] == '=') {
    121          			/* Found it.  Remove this pointer by moving later ones back.  */
    122          			char **dp = ep;
    123          			do {
    124          				dp[0] = dp[1];
    125          			} while (*dp++);
    126          			/* Continue the loop in case NAME appears again.  */
    127          		} else {
    128          			++ep;
    129          		}
    130          	}
    131          
    132          	return 0;
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??unsetenv_3:
   \   00000050   0600A0E1           MOV      R0,R6
   \                     ??unsetenv_4:
   \   00000054   041090E5           LDR      R1,[R0, #+4]
   \   00000058   001080E5           STR      R1,[R0, #+0]
   \   0000005C   ........           LDR      R1,[R0], #+4
   \   00000060   000051E3           CMP      R1,#+0
   \   00000064   FAFFFF1A           BNE      ??unsetenv_4
   \                     ??unsetenv_2:
   \   00000068   000096E5           LDR      R0,[R6, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   7080BD08           POPEQ    {R4-R6,PC}
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   0410A0E1           MOV      R1,R4
   \   0000007C   150100EF           SWI      +277
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0300001A           BNE      ??unsetenv_5
   \   00000088   000096E5           LDR      R0,[R6, #+0]
   \   0000008C   0000D5E7           LDRB     R0,[R5, +R0]
   \   00000090   3D0050E3           CMP      R0,#+61
   \   00000094   EDFFFF0A           BEQ      ??unsetenv_3
   \                     ??unsetenv_5:
   \   00000098   046086E2           ADD      R6,R6,#+4
   \   0000009C   F1FFFFEA           B        ??unsetenv_2
    133          }
    134          
    135          

   \                                 In segment CODE, align 4, keep-with-next
    136          __arm char *getenv(const char *var)
    137          {
   \                     getenv:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    138              int len;
    139              char **ep;
    140          
    141              if (!(ep=l__environ))
   \   00000008   ........           LDR      R0,??DataTable3  ;; l__environ
   \   0000000C   005090E5           LDR      R5,[R0, #+0]
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0100001A           BNE      ??getenv_0
    142          	return NULL;
   \                     ??getenv_1:
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   7080BDE8           POP      {R4-R6,PC}
    143              len = strlen(var);
   \                     ??getenv_0:
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1B0000EF           SWI      +27
   \   00000028   0060A0E1           MOV      R6,R0
   \   0000002C   000000EA           B        ??getenv_2
    144              while(*ep) {
    145          	if (memcmp(var, *ep, len) == 0 && (*ep)[len] == '=') {
    146          	    return *ep + len + 1;
    147          	}
    148          	ep++;
   \                     ??getenv_3:
   \   00000030   045085E2           ADD      R5,R5,#+4
   \                     ??getenv_2:
   \   00000034   001095E5           LDR      R1,[R5, #+0]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   F5FFFF0A           BEQ      ??getenv_1
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   1C0100EF           SWI      +284
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F6FFFF1A           BNE      ??getenv_3
   \   00000054   000095E5           LDR      R0,[R5, #+0]
   \   00000058   0000D6E7           LDRB     R0,[R6, +R0]
   \   0000005C   3D0050E3           CMP      R0,#+61
   \   00000060   F2FFFF1A           BNE      ??getenv_3
   \   00000064   000095E5           LDR      R0,[R5, #+0]
   \   00000068   000086E0           ADD      R0,R6,R0
   \   0000006C   010080E2           ADD      R0,R0,#+1
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    149              }
    150              return NULL;
    151          }
    152          
    153          /* The `clearenv' was planned to be added to POSIX.1 but probably
    154             never made it.  Nevertheless the POSIX.9 standard (POSIX bindings
    155             for Fortran 77) requires this function.  */

   \                                 In segment CODE, align 4, keep-with-next
    156          __arm int clearenv(void)
    157          {
   \                     clearenv:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    158          
    159          	/* If we allocated this environment we can free it.
    160          	 * If we did not allocate this environment, it's NULL already
    161          	 * and is safe to free().  */
    162              if(!l_last_environ)
   \   00000004   ........           LDR      R4,??DataTable3  ;; l__environ
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   000050E3           CMP      R0,#+0
    163                  return 1;
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   7080BD08           POPEQ    {R4-R6,PC}
    164          
    165          	int i = 0;
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   0060A0E3           MOV      R6,#+0
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500001A           BNE      ??clearenv_0
   \   0000002C   090000EA           B        ??clearenv_1
    166          	while(l_last_environ[i])
    167          	{
    168          	  mfree(l_last_environ[i]);
   \                     ??clearenv_2:
   \   00000030   0100A0E1           MOV      R0,R1
   \   00000034   150000EF           SWI      +21
    169                    l_last_environ[i] = 0;
   \   00000038   040094E5           LDR      R0,[R4, #+4]
   \   0000003C   065180E7           STR      R5,[R0, +R6, LSL #+2]
    170          	  ++i;
   \   00000040   016086E2           ADD      R6,R6,#+1
   \                     ??clearenv_0:
   \   00000044   040094E5           LDR      R0,[R4, #+4]
   \   00000048   060180E0           ADD      R0,R0,R6, LSL #+2
   \   0000004C   001090E5           LDR      R1,[R0, #+0]
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   F5FFFF1A           BNE      ??clearenv_2
    171          	}
    172          
    173              mfree(l_last_environ);
   \                     ??clearenv_1:
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   150000EF           SWI      +21
    174          	l_last_environ = NULL;
   \   00000060   045084E5           STR      R5,[R4, #+4]
    175          	l__environ = NULL;
   \   00000064   005084E5           STR      R5,[R4, #+0]
    176          	return 0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   7080BDE8           POP      {R4-R6,PC}       ;; return
    177          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     l__environ

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""
    178          

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     __add_to_environ    40
     clearenv            16
     getenv              16
     setenv               4
     strchrnul            0
     unsetenv            16


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     l__environ          8
     ??strchrnul_0      20
     __add_to_environ  296
     setenv             16
     unsetenv          160
     getenv            116
     clearenv          112
     ??DataTable3        4
     ?<Constant "">      1
      Others            36

 
 748 bytes in segment CODE
   1 byte  in segment DATA_C
   8 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 724 bytes of CODE  memory (+ 36 bytes shared)
   1 byte  of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: 2
