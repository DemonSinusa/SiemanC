##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    25/Nov/2013  17:49:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\Mutex #
#                       .c                                                   #
#    Command line    =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\Mutex #
#                       .c -D NDEBUG -D NEWSGOLD -D ELKA -lC                 #
#                       E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\List\ #
#                        -o E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\O #
#                       bj\ -s9 --no_unroll --cpu_mode thumb --endian        #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "E:\iar\Embedded Workbench 4.0      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\List\ #
#                       Mutex.lst                                            #
#    Object file     =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\Obj\M #
#                       utex.r79                                             #
#                                                                            #
#                                                                            #
##############################################################################

E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\Mutex.c
      1          
      2          /**
      3            (c) Z.Vova
      4          */
      5          
      6          #if 0
      7          #include "loader.h"
      8          #include "Mutex.h"
      9          
     10          /* Для работы нужны функции нуклеуса, да и врядли оно работает */
     11          
     12          __arm int mutex_init(Mutex *mtx)
     13          {
     14            /* шо это нам подсунули? */
     15            if(!mtx) return -1;
     16            zeromem(mtx, sizeof(Mutex));
     17            
     18            NU_TASK *task = NU_Current_Task_Pointer();
     19            
     20            /* а такое может быть? */
     21            if( !task ) return -2;
     22            
     23            /* инициализируем структуру */
     24            mtx->task = task;
     25            mtx->is_locked = 0;
     26            return 0;
     27          }
     28          
     29          
     30          
     31          __arm int mutex_lock(Mutex *mtx)
     32          {
     33            if(!mtx) return -1;
     34            
     35            if(!mtx->task) return -2;
     36            
     37            /* ы, локанули и ещё раз чтоль? о_О*/
     38            if(mtx->is_locked) return -3;
     39            
     40            unsigned int status = 0;
     41            //status = NU_Suspend_Task(mtx->task);
     42            mtx->is_locked = 1;
     43            
     44            while(mtx->is_locked)
     45            {
     46              if(!mtx->is_locked) break;
     47              NU_Sleep(5);
     48            }
     49            
     50            return status;
     51          }
     52          
     53          
     54          
     55          
     56          __arm int mutex_unlock(Mutex *mtx)
     57          {
     58            if(!mtx) return -1;
     59            if(!mtx->task) return -2;
     60            if(!mtx->is_locked) return -3;
     61            unsigned int status = 0;
     62            //status = NU_Resume_Task(mtx->task);
     63            mtx->is_locked = 0;
     64            return status;
     65          }
     66          
     67          
     68          __arm int mutex_destroy(Mutex *mtx)
     69          {
     70            if(!mtx) return -1;
     71            
     72            if(mtx->is_locked)
     73            {
     74              mtx->is_locked = 0;
     75              //NU_Resume_Task(mtx->task);
     76            }
     77            
     78            zeromem(mtx, sizeof(Mutex));
     79            return 0;
     80          }
     81          
     82          #endif


   Segment part sizes:

     Function/Label Bytes
     -------------- -----

 
 
 0 bytes of memory

Errors: none
Warnings: none
