##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    25/Nov/2013  17:49:19 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\strch #
#                       rnul.c                                               #
#    Command line    =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\strch #
#                       rnul.c -D NDEBUG -D NEWSGOLD -D ELKA -lC             #
#                       E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\List\ #
#                        -o E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\O #
#                       bj\ -s9 --no_unroll --cpu_mode thumb --endian        #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "E:\iar\Embedded Workbench 4.0      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\List\ #
#                       strchrnul.lst                                        #
#    Object file     =  E:\iar\SVN\Elfloader3\elfloader3\srcMy\E71sw45\Obj\s #
#                       trchrnul.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

E:\iar\SVN\Elfloader3\elfloader3\srcMy\loader3\strchrnul.c
      1          #include <string.h>
      2          
      3          #if 0
      4          __arm char *
      5          strchrnul (s, c_in)
      6               const char *s;
      7               int c_in;
      8          {
      9            const unsigned char *char_ptr;
     10            const unsigned long int *longword_ptr;
     11            unsigned long int longword, magic_bits, charmask;
     12            unsigned char c;
     13          
     14            c = (unsigned char) c_in;
     15          
     16            /* Handle the first few characters by reading one character at a time.
     17               Do this until CHAR_PTR is aligned on a longword boundary.  */
     18            for (char_ptr = (const unsigned char *) s;
     19                 ((unsigned long int) char_ptr & (sizeof (longword) - 1)) != 0;
     20                 ++char_ptr)
     21              if (*char_ptr == c || *char_ptr == '\0')
     22                return (void *) char_ptr;
     23          
     24            /* All these elucidatory comments refer to 4-byte longwords,
     25               but the theory applies equally well to 8-byte longwords.  */
     26          
     27            longword_ptr = (unsigned long int *) char_ptr;
     28          
     29            /* Bits 31, 24, 16, and 8 of this number are zero.  Call these bits
     30               the "holes."  Note that there is a hole just to the left of
     31               each byte, with an extra at the end:
     32          
     33               bits:  01111110 11111110 11111110 11111111
     34               bytes: AAAAAAAA BBBBBBBB CCCCCCCC DDDDDDDD
     35          
     36               The 1-bits make sure that carries propagate to the next 0-bit.
     37               The 0-bits provide holes for carries to fall into.  */
     38            switch (sizeof (longword))
     39              {
     40              case 4: magic_bits = 0x7efefeffL; break;
     41              case 8: magic_bits = ((0x7efefefeL << 16) << 16) | 0xfefefeffL; break;
     42              default:
     43                abort ();
     44              }
     45          
     46            /* Set up a longword, each of whose bytes is C.  */
     47            charmask = c | (c << 8);
     48            charmask |= charmask << 16;
     49            if (sizeof (longword) > 4)
     50              /* Do the shift in two steps to avoid a warning if long has 32 bits.  */
     51              charmask |= (charmask << 16) << 16;
     52            if (sizeof (longword) > 8)
     53              abort ();
     54          
     55            /* Instead of the traditional loop which tests each character,
     56               we will test a longword at a time.  The tricky part is testing
     57               if *any of the four* bytes in the longword in question are zero.  */
     58            for (;;)
     59              {
     60                /* We tentatively exit the loop if adding MAGIC_BITS to
     61          	 LONGWORD fails to change any of the hole bits of LONGWORD.
     62          
     63          	 1) Is this safe?  Will it catch all the zero bytes?
     64          	 Suppose there is a byte with all zeros.  Any carry bits
     65          	 propagating from its left will fall into the hole at its
     66          	 least significant bit and stop.  Since there will be no
     67          	 carry from its most significant bit, the LSB of the
     68          	 byte to the left will be unchanged, and the zero will be
     69          	 detected.
     70          
     71          	 2) Is this worthwhile?  Will it ignore everything except
     72          	 zero bytes?  Suppose every byte of LONGWORD has a bit set
     73          	 somewhere.  There will be a carry into bit 8.  If bit 8
     74          	 is set, this will carry into bit 16.  If bit 8 is clear,
     75          	 one of bits 9-15 must be set, so there will be a carry
     76          	 into bit 16.  Similarly, there will be a carry into bit
     77          	 24.  If one of bits 24-30 is set, there will be a carry
     78          	 into bit 31, so all of the hole bits will be changed.
     79          
     80          	 The one misfire occurs when bits 24-30 are clear and bit
     81          	 31 is set; in this case, the hole at bit 31 is not
     82          	 changed.  If we had access to the processor carry flag,
     83          	 we could close this loophole by putting the fourth hole
     84          	 at bit 32!
     85          
     86          	 So it ignores everything except 128's, when they're aligned
     87          	 properly.
     88          
     89          	 3) But wait!  Aren't we looking for C as well as zero?
     90          	 Good point.  So what we do is XOR LONGWORD with a longword,
     91          	 each of whose bytes is C.  This turns each byte that is C
     92          	 into a zero.  */
     93          
     94                longword = *longword_ptr++;
     95          
     96                /* Add MAGIC_BITS to LONGWORD.  */
     97                if ((((longword + magic_bits)
     98          
     99          	    /* Set those bits that were unchanged by the addition.  */
    100          	    ^ ~longword)
    101          
    102          	   /* Look at only the hole bits.  If any of the hole bits
    103          	      are unchanged, most likely one of the bytes was a
    104          	      zero.  */
    105          	   & ~magic_bits) != 0 ||
    106          
    107          	  /* That caught zeroes.  Now test for C.  */
    108          	  ((((longword ^ charmask) + magic_bits) ^ ~(longword ^ charmask))
    109          	   & ~magic_bits) != 0)
    110          	{
    111          	  /* Which of the bytes was C or zero?
    112          	     If none of them were, it was a misfire; continue the search.  */
    113          
    114          	  const unsigned char *cp = (const unsigned char *) (longword_ptr - 1);
    115          
    116          	  if (*cp == c || *cp == '\0')
    117          	    return (char *) cp;
    118          	  if (*++cp == c || *cp == '\0')
    119          	    return (char *) cp;
    120          	  if (*++cp == c || *cp == '\0')
    121          	    return (char *) cp;
    122          	  if (*++cp == c || *cp == '\0')
    123          	    return (char *) cp;
    124          	  if (sizeof (longword) > 4)
    125          	    {
    126          	      if (*++cp == c || *cp == '\0')
    127          		return (char *) cp;
    128          	      if (*++cp == c || *cp == '\0')
    129          		return (char *) cp;
    130          	      if (*++cp == c || *cp == '\0')
    131          		return (char *) cp;
    132          	      if (*++cp == c || *cp == '\0')
    133          		return (char *) cp;
    134          	    }
    135          	}
    136              }
    137          
    138            /* This should never happen.  */
    139            return NULL;
    140          }
    141          #endif
    142          
    143          
    144          
    145          
    146          
    147          
    148          
    149          
    150          


   Segment part sizes:

     Function/Label Bytes
     -------------- -----

 
 
 0 bytes of memory

Errors: none
Warnings: none
