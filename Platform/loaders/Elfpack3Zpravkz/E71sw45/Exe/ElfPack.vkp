;E71v45
;Библиотека функций
;Functions Library
;(c) avkiev

+0074000
#pragma enable old_equal_ff
0000: 0xA009B810 ; 000: __arm void loopback0();
0004: 0xA009B810 ; 001: __arm void loopback1();
0008: 0xA009B810 ; 002: __arm void loopback2();
000C: 0xA009B810 ; 003: __arm void loopback3();
0010: 0xA009B810 ; 004: __arm void loopback4();
0014: 0xA058AC29 ; 005: DecToHex
0018: 0xA01A7790 ; 006: __arm int GetAkku(int param1,int param2);
001C: 0xA006F061 ; 007: GetLP
0020: 0xA04B7254 ; 008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
0024: 0xA0543CE4 ; 009: __arm void SwitchPhoneOff();
0028: 0xA0568464 ; 00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
002C: 0xA0568524 ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
0030: 0xA0568654 ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA05683B8 ; 00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber);
0038: 0xA05683E8 ; 00E: fflush
003C: 0xA0568418 ; 00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);

0040: 0xA056805C ; 010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
0044: 0xA006F001 ; 011: OpenReadCloseFile
0048: 0xA0567EBC ; 012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);
004C: 0xA05681B0 ; 013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);
0050: 0xA0092F51 ; 014: __arm void *malloc(unsigned int size);
0054: 0xA0092F93 ; 015: __arm void mfree(void *);
0058: 0xA0FAEA01 ; 016: __thumb int sprintf(char *buf, char *str, ...);
005C: 0xA122AE25 ; 017: __thumb char * strcat (char *,const char *);
0060: 0xA122AE45 ; 018: __thumb char * strchr (const char *,int);
0064: 0xA122AE68 ; 019: __arm int  strcmp (const char *,const char *);
0068: 0xA122AF05 ; 01A: __thumb char * strcpy (char *dest,const char *source);
006C: 0xA122AF85 ; 01B: __thumb unsigned int strlen(char *);
0070: 0xA04FB4D9 ; 01C: __thumb void  wsAppendChar (void *WSHDR,int wchar);
0074: 0xA04FB48D ; 01D: __thumb int wsInsertChar(WSHDR *ws,int wchar, int pos);
0078: 0xA094CE9B ; 01E: __thumb IMGHDR *GetPITaddr(int num);
007C: 0xA05C34E5 ; 01F: DrawMainScreen

0080: 0xA0670B83 ; 020: DrawScreenSaver
0084: 0xA094CFC3 ; 021: __thumb int GetImgHeight(int picture);
0088: 0xA094CFD3 ; 022: __thumb int GetImgWidth(int picture);
008C: 0xA05C17C5 ; 023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture);
0090: 0xA0A0C91B ; 024: DrawImage2
0094: 0xA05C0B9F ; 025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);
0098: 0xA0A0C845 ; 026: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush);
009C: 0xA05C0DDD ; 027: __thumb void AddIconToIconBar(void *data, unsigned int picture, unsigned short *pos);
00A0: 0xA04E8608 ; 028: getEELiteMaxID 
00A4: 0xA04E7794 ; 029: getEEFullMaxID 
00A8: 0xA04E7B8C ; 02A: __arm int *GetEELiteBlockAddress(short blocknum);
00AC: 0xA04E8518 ; 02B: getEELiteBlockSizeVersion 
00B0: 0xA04E7228 ; 02C: __arm int EEFullGetBlockInfo(unsigned int block,int *size,char *version);
00B4: 0xA04E878C ; 02D: StartWriteEELiteBlock 
00B8: 0xA04E8A84 ; 02E: FinishWriteEELiteBlock 
00BC: 0xA04E8670 ; 02F: DeleteEELiteBlock 

00C0: 0xA04E896C ; 030: WriteEELiteBlock 
00C4: 0xA122B0CD ; 031: char *strrchr(const char *s,int c);
00C8: 0xA05A2C64 ; 032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);
00CC: 0xA0595668 ; 033: PlaySound2
00D0: 0xA0B6C7B0 ; 034: PlaySoundLoop
;00D4: 0x ; 035: AlarmClockRing
00D8: 0xA05AE173 ; 036: void SLI_SetState(unsigned char state);
00DC: 0xA059A934 ; 037: void Ringtones_SetState(unsigned char state);
00E0: 0xA06B1E4C ; 038: int Registry_GetHMIKeyID(char *Keyword);
00E4: 0xA06B18C0 ; 039: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path);
00E8: 0xA06AEAB8 ; 03A: Registry_DeleteResourcePath(int HMIKeyID, int Prio);
00EC: 0xA0FAF769 ; 03B: MemChr
00F0: 0xA0568564 ; 03C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber);
;0F4: 0x ; 03D: editOrNewTXTModule
00F8: 0xA06B0F60 ; 03E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path);
00FC: 0xA0948031 ; 03F: char *GetPaletteAdrByColorIndex(int ColorIndex);

0100: 0xA05AEC0F ; 040: GetVibraStatus
0104: 0xA08C9EF7 ; 041: GetProvider
0108: 0xA0670B6F ; 042: IsScreenSaver
010C: 0xA08D3C95 ; 043: __arm int IsUnlocked(void);
0110: 0xA08CCB21 ; 044: TempLightOn
0114: 0xA006F241 ; 045: GetWavLen
;0118: 0x ; 046: HasNewSMS
011C: 0xA05C02BF ; 047: __thumb int HasFlashSMS();
;0120: 0x ; 048: ReadNewSMS
0124: 0xA066C8E1 ; 049: __thumb int ReadFlashSMS(void);
0128: 0xA059932C ; 04A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167);
012C: 0xA0ACB520 ; 04B: StartMidlet
0130: 0xA09B4E31 ; 04C: __thumb GetMissedCallsCount;
0134: 0xA0092531 ; 04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());
0138: 0xA094EA89 ; 04E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA094EAF7 ; 04F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));

0140: 0xA094EB01 ; 050: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
0144: 0xA0D384DF ; 051: GetNetAccessMode
0148: 0xA8D87270 ; 052: GetIlluminationDataTable
014C: 0xA0FAF78D ; 053: memcmp(void *m1,void *m2,int n);
0150: 0xA062A7BD ; 054: StrToInt
;0154: 0x ; 055: SwitchVibraOnOff
0158: 0xA006F131 ; 056: PlayVibra
015C: 0xA00978A5 ; 057: int IsTimerProc(GBSTMR *)
0160: 0xA0FAFC48 ; 058: ClearMemory
0164: 0xA0FAFCA4 ; 059: memcpy(void *dest,const void *source,int cnt);
0168: 0xA08D3553 ; 05A: KeypressOn
016C: 0xA08D3665 ; 05B: KeypressOff
0170: 0xA06236E8 ; 05C: __arm unsigned char GetCPUClock();
0174: 0xA06EC933 ; 05D: __thumb unsigned char GetCPULoad();
0178: 0xA06EC901 ; 05E: GetMMIMemUsed
017C: 0xA0092F9B ; 05F: __arm int GetFreeRamAvail();

0180: 0xA06E83A5 ; 060: ShowMainMenu
0184: 0xA063B07B ; 061: ShowNativeMenu
0188: 0xA05AEBD5 ; 062: SetVibraStatus
018C: 0xA05C4441 ; 063: MMI_CanvasBuffer_FlushV(int CanvasID);
0190: 0xA094F594 ; 064: TriggerUpdate
;0194: 0x ; 065: EndCall
0198: 0xA09B648B ; 066: EndCallBusy
019C: 0xA0668D19 ; 067: IsDirectCallActive
01A0: 0xA0670B49 ; 068: GetScreenSaverRAM
01A4: 0xA00976FF ; 069: LockSched(void);
01A8: 0xA009777B ; 06A: UnlockSched(void);
01AC: 0xA0567F34 ; 06B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);
01B0: 0xA0567FB4 ; 06C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B4: 0xA0567E7C ; 06D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B8: 0xA0CD95ED ; 06E: __thumb int IsCalling(void);
01BC: 0xA0923291 ; 06F: __arm void RefreshGPRSTraffic();

01C0: 0xA09232A5 ; 070: __arm int *GetGPRSTrafficPointer();
01C4: 0xA0A0C2C7 ; 071: DrawRoundRect
;01C8: 0x ; 072: SetCurrentSecondOfCall
01CC: 0xA0CD9DEF ; 073: GetTypeOfCall
01D0: 0xA0635875 ; 074: __thumb void* GetFunctionPointer(char * _shortcut);
01D4: 0xA05C4965 ; 075: IsCanvasBufferSet(char CanvasID);
01D8: 0xA05C4915 ; 076: GetCanvasBufferPicPtr(char CanvasID);
;01DC: 0x ; 077: set2color_byPaletteAdr
;01E0: 0x ; 078: GetTimeFormat
01E4: 0xA08D2D63 ; 079: DrawObject2Layer(LCD_Layer *, DRWOBJ *);
01E8: 0xA094CA19 ; 07A: UpdateDisplayByLayerPtr(LCD_Layer *);
;01EC: 0x ; 07B: GetProfileFilter
01F0: 0xA04AD9CB ; 07C: __arm unsigned int SetVibration(unsigned int power);
01F4: 0xA0CD8FAF ; 07D: IsIncognitoCall
01F8: 0xA0CD864D ; 07E: Rand
01FC: 0xA069F7F8 ; 07F: IsPlayerOn

0200: 0xA0A82501 ; 080: __thumb void int ShowCallList(int list, int zero);
0204: 0xA0FAFFF8 ; 081: HexToDec
0208: 0xA069FA9C ; 082: GetCurrentTrackFilename
;020C: 0x ; 083: GetPathOfFoundFile
0210: 0xA0568228 ; 084: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber);
0214: 0xA058AF51 ; 085: StrCmpNoCase
0218: 0xA04E7048 ; 086: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg);
021C: 0xA04E72D8 ; 087: __arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg); 
0220: 0xA006EF00 ; 088: __arm char GetAccessoryType(void);
0224: 0xA08D5F30 ; 089: GetLangMesIntoWS
0228: 0xA0567E0C ; 08A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);
022C: 0xA05686C0 ; 08B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);
0230: 0xA0502AE0 ; 08C: __thumb void RegExplorerExt(REGEXPLEXT *);
0234: 0xA05C2B05 ; 08D: GetProfileName
0238: 0xA05680C4 ; 08E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber);
023C: 0xA0568148 ; 08F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber);

0240: 0xA05685DC ; 090: __arm int truncate (int FileHandler, int length, int *errornumber);
0244: 0xA0567FF4 ; 091: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber);
0248: 0xA0B986C4 ; 092: __arm int * calloc(size_t nelem, size_t elsize);
024C: 0xA0543CF0 ; 093: RebootPhone
0250: 0xA0502D7C ; 094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
0254: 0xA0502C54 ; 095: __arm int UnRegExplorerExt(REGEXPLEXT const *);
0258: 0xA01B56AF ; 096: GetWavLenByContent
025C: 0xA006F261 ; 097: CreatePath
0260: 0xA006F211 ; 098: __thumb void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff);
0264: 0xA059959C ; 099: __arm short PlayMelodyInMem(char flags,void *MelAddr,int MelSize,int CepId,int msg,PLAYFILE_OPT *PlayFileStruct);
;0268: 0x ; 09A: __arm int ChangeVolume(unsigned char Volume);
;026C: 0x ; 09B: Audio params addr
0270: 0xA067109D ; 09C: CloseScreensaver
0274: 0xA066CA43 ; 09D: GetMissedEventsPtr
0278: 0xA006F2B1 ; 09E: int GetMissedEventCount(unsigned int Event);
;027C: 0x ; 09F: DrawRect

0280: 0xA093EB4D ; 0A0: wsprintf(WSHDR *,const char *format,...);
0284: 0xA04FB3CB ; 0A1: wstrcpy
0288: 0xA04FADB1 ; 0A2: Unicode_GetCharByPosition
028C: 0xA0568BA4 ; 0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size);
0290: 0xA093F611 ; 0A4: AllocWS(int len);
0294: 0xA04FAB85 ; 0A5: FreeWS_2(WSHDR *wshdr);
;0298: 0x ; 0A6: void ResetGPRSTraffic()
029C: 0xA0D2C34F ; 0A7: __thumb char IsGPRSEnabled();
02A0: 0xA0CDA7AD ; 0A8: char IsGPRSConnected();
02A4: 0xA08D447B ; 0A9: __thumb void KbdLock();
02A8: 0xA0A1CEB1 ; 0AA: char *GetCurrentLocale();
02AC: 0xA009B810 ; 0AB: __arm void loopback171();
;02B0: 0x ; 0AC: DrawText
;02B4: 0x ; 0AD: StrAnsi2Uni
;02B8: 0x ; 0AE: StrUni2Ansi
02BC: 0xA06EC6FD ; 0AF: Hex2Int

;02C0: 0x ; 0B0: DrawPicWithCanvas
02C4: 0xA006F101 ; 0B1: DrawColorPicWithCanvas
;02C8: 0x ; 0B2: GetBuildCanvas
02CC: 0xA006F551 ; 0B3: long Seconds2iTime(int timeval);
02D0: 0xA08CF3FB ; 0B4: __thumb void GetDateTime(TDate *, TTime *);
02D4: 0xA0589BEB ; 0B5: __thumb char GetWeek(TDate*);
02D8: 0xA05ADA13 ; 0B6: __thumb char GetProfile();
02DC: 0xA05ADA73 ; 0B7: __thumb char SetProfile(char);
02E0: 0xA0FAFE18 ; 0B8: __arm int dwMODdw(int denom,int number);
02E4: 0xA08D3F5F ; 0B9: __thumb void KbdUnlock();
02E8: 0xA0092F5D ; 0BA: __arm void *realloc(void *ptr, int size);
02EC: 0xA0FAFE00 ; 0BB: __arm void *memset(void *s, int c, int n);
02F0: 0xA0FAFEF0 ; 0BC: __arm int divide(int divisor, int dividend);
02F4: 0xA0FAFFB4 ; 0BD: __arm  int DivBy10(int divident);
02F8: 0xA0060C91 ; 0BE: RunScanner
02FC: 0xA0063001 ; 0BF: SpellTime

;0300: 0x ; 0C0: MiniGPS
0304: 0xA0060C51 ; 0C1: RunDispatcher
;0308: 0x ; 0C2: GetAllPatchesByInject
030C: 0xA006F091 ; 0C3: ProcessFiles
0310: 0xA0060C01 ; 0C4: GetBuffer
0314: 0xA066C9EB ; 0C5: IsIdleUiOnTop
0318: 0xA01A6A50 ; 0C6: __arm char GetAkkuCapacity();
031C: 0xA06236B0 ; 0C7: SetCpuClockTempHi(2)
0320: 0xA8D8378C ;80C8: __arm unsigned short *RamCap();
0324: 0xA8D837BE ; 0C9: RamLS
0328: 0xA8EFA5F2 ;80CA: __arm RAMNET * RamNet();
032C: 0xA8E36D14 ; 0CB: RamRingtoneStatus
0330: 0xA8EB59E4 ; 0CC: RamMissedCalls
;0334: 0x ; 0CD: RamMissedSMS
0338: 0xA8D97460 ; 0CE: RamDateTime
033C: 0xA8F5B964 ; 0CF: RamAlarm

0340: 0xA8E27140 ; 0D0: RamAccPoint
0344: 0xA8EAADD8 ; 0D1: RamScreensaver
0348: 0xA8D97488 ; 0D2: RamAutoTime
034C: 0xA8A80000 ; 0D3: RamStby
0350: 0xA8E37598 ; 0D4: RamMissedMes
0354: 0xA8DF3348 ; 0D5: RamIsLocked
0358: 0xA8E6936C ; 0D6: RamNetOnline
035C: 0xA8E6A484 ; 0D7: RamScreenBrightness
0360: 0xA8DA7D39 ; 0D8: RamMenuAnywhere
;0364: 0x ; 0D9: RamShutdownMode
0368: 0xA8E6A520 ; 80DA: RamIsShutdown
036C: 0xA8F59D84 ; 0DB: RamNotOnMainscreen
;0370: 0x ; 0DC: RamRandSeed
0374: 0xAD2B3D58 ; 0DD: RamCurrentTrack
0378: 0xA8E35E98 ; 0DE: RamIsSimPresent
037C: 0xA8DF3320 ; 0DF: RamPressedKey

0380: 0xA8DA81F0 ; 80E0: __arm void * RamScreenBuffer();
0384: 0xA8F05078 ; 0E1: unsigned int RamMPlayer_CtrlCode();
;0388: 0x ; 0E2: RamKeyBuffer
;038C: 0x ; 0E3: RamProfileNum
0390: 0xA8D80010 ; 0E4: FreeRAM
0394: 0x0000123D ; 0E5: LP_MonthsShort
0398: 0x00000268 ; 0E6: Pic_Big0
039C: 0x00000830 ; 0E7: Pic_Little0
03A0: 0x00000800 ; 0E8: Pic_Extra
03A4: 0x00000810 ; 0E9: Pic_Profiles
03A8: 0x00000818 ; 0EA: Pic_Vibra
;03AC: 0x ; 0EB: Pic_Call
03B0: 0x00000800 ; 0EC: Pic_AdvNet
03B4: 0x00001137 ; 0ED: LP_MonthsLong
03B8: 0x000003EB ; 0EE: LP_Weekdays
03BC: 0x000005B0 ; 0EF: Pic_Calendar

03C0: 0x00001200 ; 0F0: Pic_AccuGraph
03C4: 0xA05C1801 ; 0F1: __arm void *BuildCanvas(void);
;03C8: 0x ; 0F2: lpRAM_PIT
;03CC: 0x ; 0F3: RAM_PIT_Cap
;03D0: 0x ; 0F4:
03D4: 0xA8DF32B8 ; 0F5: Ram_LCD_Overlay_Layer
03D8: 0xA8E6AACC ; 0F6: Ram_Layer_Base_Ptr
;03DC: 0x ; 0F7:
;03E0: 0x ; 0F8: Additional_PIT_address
;03E4: 0x ; 0F9: Additional_PIT_start
;03E8: 0x ; 0FA: Additional_PIT_end
;03EC: 0x ; 0FB:
;03F0: 0x ; 0FC: PictureRelocationTable
;03F4: 0x ; 0FD: PictureRelocationBase
;03F8: 0x ; 0FE: NextPictureMagic
03FC: 0xA0074000 ; 0FF: unsigned int AddrLibrary();

0400: 0xA0091EAB ; 100: void GBS_SendMessage(int cepid_to, int msg, ...);
0404: 0xA009130B ; 101: int GBS_ReceiveMessage(GBS_MSG *);
0408: 0xA0091855 ; 102: void GBS_AcceptMessage(void);
040C: 0xA009153B ; 103: void GBS_ClearMessage(void);
0410: 0xA00917B9 ; 104: void GBS_PendMessage(GBS_MSG *);
0414: 0xA0092221 ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero);
0418: 0xA8E903AC ; 106: CSMROOT *CSM_root();
041C: 0xA094695F ; 107: __thumb int CreateCSM(const CSM_DESC *,void *,int);
0420: 0xA0946971 ; 108: CSM_RAM *FindCSMbyID(int id);
0424: 0xA0946A3B ; 109: __thumb void DoIDLE(void);
;0428: 0x ; 10A: void *GetConfig(unsigned int id);
;042C: 0x ; 10B: void *GetMinAdrScan();
;0430: 0x ; 10C: void *GetMaxAdrScan();
;0434: 0x ; 10D: unsigned short *GetCI();
;0438: 0x ; 10E: void Vibration(unsigned int power, unsigned int duration);
043C: 0xA05BFC9D ; 10F: __thumb void freeUSSD();

0440: 0xA058B001 ; 110: __thumb char *wstrcopy(char *dst, char *src);
0444: 0xA05BFCD9 ; 111: __thumb char GetTypeUSSD();
0448: 0xA05BFCE9 ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *);
044C: 0xA122AF55 ; 113: __thumb char * strpbrk (const char *s1,const char *s2);
0450: 0xA122AFD1 ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);
0454: 0xA122B001 ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n);
0458: 0xA122B051 ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen);
045C: 0xA122B0CD ; 117: __thumb char * strrchr (const char *s,int c);
0460: 0xA122B10D ; 118: __thumb char * strstr (const char *s1,const char *s2);
0464: 0xA122B135 ; 119: __thumb int  strtol (const char *nptr,char **endptr,int base);
0468: 0xA122B1B1 ; 11A: __thumb int  strtoul (const char *nptr,char **endptr,int base);
046C: 0xA0FAE9AD ; 11B: __thumb int snprintf (char *,int n,const char *format,...);
0470: 0xA0FAF78D ; 11C: __thumb int  memcmp (void *m1,void *m2,int n);
0474: 0xA0FAFC00 ; 11D: __arm void  zeromem (void *dest,int n);
0478: 0xA0FAFCA4 ; 11E: __arm void * memcpy (void *dest,const void *source,int cnt);
047C: 0xA04FB3CB ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);

0480: 0xA04FB3ED ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);
0484: 0xA04FB411 ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);
0488: 0xA04FB445 ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
048C: 0xA04FAC53 ; 123: __thumb int  wstrlen (WSHDR *wshdr);
0490: 0xA093EB4D ; 124: __thumb int wsprintf (WSHDR *,const char *format,...);
0494: 0xA093F611 ; 125: __thumb WSHDR * AllocWS (int len);
0498: 0xA04FB63D ; 126: __thumb void  CutWSTR (void *WSHDR,int len);
049C: 0xA04FB25B ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);
04A0: 0xA04FB2D5 ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len);
04A4: 0xA04FAB85 ; 129: __thumb void  FreeWS (WSHDR *wshdr);
04A8: 0xA08D2DCB ; 12A: __thumb void  DrawObject (DRWOBJ *);
04AC: 0xA0946B17 ; 12B: __thumb void  AddKeybMsgHook (void *proc);
04B0: 0xA0946B1F ; 12C: __thumb int  AddKeybMsgHook_end (void *proc);
04B4: 0xA0946B27 ; 12D: __unknown void  RemoveKeybMsgHook (void *proc);
04B8: 0xA0948031 ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex);
04BC: 0xA0948055 ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest);

04C0: 0xA0948065 ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest);
04C4: 0xA0948083 ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest);
04C8: 0xA0FAFD5C ; 132: __arm void *memmove(void *dest,const void *source,int cnt);
04CC: 0xA094CA91 ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);
04D0: 0xA094CAA7 ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);
04D4: 0xA094F3FF ; 135: __thumb int  IsGuiOnTop (int id);
04D8: 0xA094F51F ; 136: __thumb int  CreateGUI_ID (void *gui,int id);
04DC: 0xA094F52F ; 137: __thumb int  CreateGUI (void *gui);
04E0: 0xA094F53D ; 138: __thumb int  CreateGUI_30or2 (void *gui);
04E4: 0xA094F577 ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag);
04E8: 0xA094F587 ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag);
04EC: 0xA094F597 ; 13B: __thumb void  GeneralFuncF1 (int cmd);
04F0: 0xA094F5A5 ; 13C: __thumb void  GeneralFuncF0 (int cmd);
04F4: 0xA094F5B3 ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd);
04F8: 0xA094F5C3 ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd);
04FC: 0xA094F657 ; 13F: __thumb void DirectRedrawGUI (void);

0500: 0xA094F66F ; 140: __thumb void  DirectRedrawGUI_ID (int id);
0504: 0xA094F663 ; 141: __thumb void PendedRedrawGUI (void);
0508: 0xA0A0A3B3 ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);
050C: 0xA009258B ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
0510: 0xA0097B1B ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr);
0514: 0xA009618B ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA00976FF ; 146: __arm void LockSched(void);
051C: 0xA009777B ; 147: __arm void UnlockSched(void);
0520: 0xA094EA79 ; 148: __thumb int ShowMSG(int flag, int lgp_id);
0524: 0xA094A35D ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);
0528: 0xA094857D ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);
052C: 0xA09484E7 ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2);
0530: 0xA094A3AB ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);
0534: 0xA094F40D ; 14D: __thumb GUI *GetTopGUI(void);
0538: 0xA0A227ED ; 14E: __thumb void *FindItemByID(GUI *gui,int id);
053C: 0xA0A22839 ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);

0540: 0xA0A0C2C7 ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
0544: 0xA0A0C81B ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
0548: 0xA094E5BF ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);
054C: 0xA0091259 ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *);
0550: 0xA0096141 ; 154: __arm void KillGBSproc(int cepid);
0554: 0xA0132BF9 ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA0131FB5 ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr);
055C: 0xA0133A6D ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
0560: 0xA0131E89 ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
0564: 0xA0132D37 ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA0132611 ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA01329B7 ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
0570: 0xA0133627 ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image);
0574: 0xA0133669 ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr);
0578: 0xA01322AD ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA0132527 ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);

0580: 0xA01331BF ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
0584: 0xA00E3BA0 ; 161: __thumb png_init_io(png_structp png_ptr, int fp);
0588: 0xA122B3E4 ; 162: __arm setjmp(jmp_buf jmpbuf);
058C: 0xA0A168BF ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
0590: 0xA0A15CFD ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);
0594: 0xA0A1600D ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
0598: 0xA0A16A5B ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
059C: 0xA0A13671 ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);
05A0: 0xA0A1C96F ; 168: __thumb void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n);
05A4: 0xA0A1C905 ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
05A8: 0xA0A1C911 ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);
05AC: 0xA05682A0 ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)05B0:
05B0: 0xA0568AB0 ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);
05B4: 0xA0981559 ; 16D: __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
05B8: 0xA08EBBB7 ; 16E: __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
05BC: 0xA08EC505 ; 16F: __arm int GetTypeOfAB_UNPRES_ITEM(int);

05C0: 0xA0926D8D ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;05C4: 0x ;171 __arm void SUBPROC(void *,...);
;05С8: 0x ;172 __arm void REDRAW(void);
05CC: 0xA0A593F5 ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA0A598ED ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA0A596F1 ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA0A59C21 ; 176: __thumb int closesocket(int socket);
05DC: 0xA0A59B29 ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA0A59D13 ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA0A5A181 ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA0A60E01 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA0A60E0D ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA8EF1EE0 ; 817C: __arm int socklasterr(void);
05F4: 0xA094F5D3 ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA094F5E3 ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA094F5EF ; 17F: __thumb void DisableIDLETMR(void);

0600: 0xA0A1C809 ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA0A1C761 ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA0A1C7A9 ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA0A1C1F9 ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA0A16047 ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA0091C33 ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA096A0E5 ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA096B1F5 ; 187: __thumb int RequestLMANConnect(LMAN_DATA *);
0620: 0x000000F0 ; 188: __adr int ScreenW(void);
0624: 0x00000140 ; 189: __adr int ScreenH(void);
0628: 0x00000020 ; 18A: __adr int HeaderH(void);
062C: 0x00000020 ; 18B: __adr int SoftkeyH(void);
0630: 0xA0097A53 ; 18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA09FF3C4 ; 18D: __arm int available0(int sock);
0638: 0xA0D2C2E9 ; 18E: __thumb void GPRS_OnOff(int on, int _1);
063C: 0xA0952DBB ; 18F: __thumb int GetCurMenuItem(void *gui);

0640: 0xA00970F9 ; 190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA0097195 ; 191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA009738F ; 192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA00973BD ; 193: __arm void MutexUnlock(MUTEX *mtx);
0650: 0xA0097459 ; 194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA0954525 ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA094F6E5 ; 196: __thumb void RefreshGUI(void);
065C: 0xA0954585 ; 197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA095469D ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA09544F7 ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA0953E97 ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA0A1C1ED ; 19B: __thumb void EDIT_SetFocus(void *gui, int item);
;0670: 0x ;19C __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA04D1FFC ; 19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA04D1F80 ; 19E: __arm void StartCpuUsageCount(void);
067C: 0xA012E85D ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);

0680: 0xA012E993 ; 1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA012F7CF ; 1A1: __thumb int inflateEnd(z_streamp strm);
;0688: 0x ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num);
;068C: 0x ; 1A3: __arm int GetCurrentGPRSProfile(void);
;0690: 0x ; 1A4: __arm int GetDisconnectTime(void);
;0694: 0x ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);
0698: 0xA00978A5 ; 1A6: __arm int IsTimerProc(GBSTMR *);
069C: 0xA092BE95 ; 1A7: __thumb char *Get_CC_NC();
06A0: 0xA0132ABD ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
06A4: 0xA0133B0F ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA0133187 ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA0133C29 ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA0132515 ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA0133C29 ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA0135735 ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA0133C0D ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);

06C0: 0xA01356CB ; 1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA0133C61 ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA0131EE9 ; 1B2: __thumb int png_check_sig(png_bytep sig, int num);
06CC: 0xA0A0E1EF ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
06D0: 0xA0A0C193 ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);
06D4: 0x00000002 ; 81B5: __adr int isnewSGold(void);
06D8: 0xA0A5ABF5 ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA0973E75 ; 1B7: __thumb unsigned int str2ip(const char *);
;06E0: 0x ; 1B8: __arm void *EXT_TOP(void);
;06E4: 0x ; 1B9: __arm void *PNG_TOP(void);
;06E8: 0x ; 1BA: __arm void *LIB_TOP(void);
;06EC: 0x ; 1BB: __arm void *DATA_N_SFB(void);
06F0: 0xA0F2F257 ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F2EF3B ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F2F137 ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E75C75 ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0E75D03 ; 1C0: __thumb void RSA_free (RSA *r);
0704: 0xA0E75ECF ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
0708: 0xA0E72467 ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA0950D31 ; 1C3: __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA0950C99 ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0A32378 ; 1C5: __arm int GetFontYSIZE(int font);
0718: 0xA0A1C791 ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA0A1C7CD ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA0A16C11 ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA0A15C97 ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA0A15C8B ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA0A15C7F ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA0A15C69 ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA0A15C51 ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA0A15D39 ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
073C: 0xA050281C ; 1CF: __unknown REGEXPLEXT *get_regextpnt_by_uid(int uid);

0740: 0xA0502624 ; 1D0: __unknown int GetExtUid_ws(WSHDR * ext);
0744: 0xA0A1C931 ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA0A1C93D ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA0A1C7D9 ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA0A1C7E5 ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA04E16F4 ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);
0758: 0xA0133C29 ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA0135797 ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
0760: 0xA0A1C839 ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA0A1C851 ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA06B4355 ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA8F4F7C4 ; 81DB: __unknown PDU *IncommingPDU(void);
0770: 0xA04FAD4F ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA04FAD71 ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA0A1C8F9 ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0A1C9A7 ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA095654F ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA08D2ED1 ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA04FB921 ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA04FB9D9 ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA094D8BF ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA0A1CA59 ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA0953275 ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
079C: 0xA0AFD0C4 ; 1E7: __arm char *GetLastJavaApplication();
07A0: 0xA0A07D8C ; 1E8: __unknown int IsNoJava();
;07A4: 0x ; 1E9: __arm IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type);
07A8: 0xA094D567 ; 1EA: __unknown int GetMaxDynIcon(void);
07AC: 0xA8EA43A2 ; 1EB: __unknown char *RAM_IMSI(void);
07B0: 0xA094D56B ; 1EC: __unknown void FreeDynIcon(int picture);
07B4: 0xA094D6D1 ; 1ED: __unknown int IsDynIconBusy(int picture);
07B8: 0xA069271C ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA094D5CF ; 1EF: __unknown void SetDynIcon(int picture,IMGHDR *img,char *bitmap); 

07C0: 0xA0695538 ; 1F0: Filecopy
07C4: 0xA0697BE0 ; 1F1: Filecopy_Op_Announce
07C8: 0xA04E1280 ; 1F2: Devmenu_Config_IsCheckboxOff 
07CC: 0xA00A320C ; 1F3: __arm unsigned int GetSessionAge(void);
07D0: 0xA8DA181C ; 81F4: char *RamServiceProviderName();
07D4: 0xA122AA09 ; 1F5: __thumb int sscanf(const char *, const char *, ...);
07D8: 0xA094D71F ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol); 
07DC: 0xA006F501 ; 1F7: long GetFileSize(char *Filename);
07E0: 0xA069F6AC ; 1F8: __arm int GetPlayStatus(void);
07E4: 0xA006F401 ; 1F9: SendMP_cmd(cmd,substract);
07E8: 0xA8D86501 ; 1FA: char *RamVolumeStep();
07EC: 0xA8D9E8B9 ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA0946A75 ; 1FC: __thumb void CloseCSM(int id);
07F4: 0xA0A0C177 ; 1FD: __thumb void SetProp2Square_v2(void);
07F8: 0xA8D87354 ; 1FE: char *RamLighterPower()
07FC: 0xA06E81DD ; 1FF: void MEDIA_PLAYLAST();

0800: 0xA0067301 ; 200: ScreenShoot
0804: 0xA0A0C941 ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);
0808: 0xA0A12A1F ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
080C: 0xA0A0E09F ; 203: __thumb void SetPixel(int x,int y,char *color);
0810: 0xA0A0AFFF ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
0814: 0xA0A0C151 ; 205: __thumb void SetProp2Square_v1(void);
0818: 0xA0FAFB25 ; 206: __thumb void srand(unsigned int seed);
081C: 0xA0A12357 ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
0820: 0xA08D2EEF ; 208: __unknown int Get_WS_width(WSHDR *ws, int font);
0824: 0xA09469B3 ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm);
0828: 0xA0A1C88D ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA0A1C8A5 ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA0A1C8BD ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA0A1C8D5 ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA0A15FC7 ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA0A15EAD ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);

0840: 0xA094F3F9 ; 210: int GetCurGuiID(void);
0844: 0xA0006171 ; 211: GBS_Cmd_4209_RefreshScreensaver;
;0848: 0x ; 212: __unknown int CardExplGetCurItem(void *csm);
;084C: 0x ; 213: __unknown void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA04FB46D ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA04FB4FD ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA093EBE7 ; 216: __thumb void wstrcatprintf(WSHDR *,const char *format,...);
085C: 0xA0B204AD ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA095785F ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA0957CA1 ; 219: __unknown void *AllocMLMenuItem(void *data);
0868: 0xA0A1C9C5 ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA0A1C9D1 ; 21B: void EDIT_RemoveTextInvert(void *gui);
0870: 0xA0A1CA0D ; 21C: __thumb int EDIT_IsBusy(void *gui);
0874: 0xA0925355 ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type);
0878: 0xA094F62F ; 21E: __thumb void FocusGUI(int id);
087C: 0xA094F63F ; 21F: __thumb void UnfocusGUI(void);

0880: 0xA08D446C ; 220: IsSliderClosed;
0884: 0xA06236C8 ; 221: __arm void SetCpuClockLow(2);
0888: 0xA06236B0 ; 222: __arm void SetCpuClockTempHi(2);
088C: 0xA069F64C ; 223: IsMediaPlayerInBackground;
0890: 0xA06A0B38 ; 224: CloseMediaPlayer;
0894: 0xA0599C48 ; 225: __unknown int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA059A6F8 ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA059A798 ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA059A7C8 ; 228: __unknown int PlayMelody_ResumePlayBack(int handle);
08A4: 0xA122B40C ; 229: __arm void longjmp(jmp_buf, int);
08A8: 0xA092D2E9 ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);
08AC: 0xA06417F9 ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag);
08B0: 0xA0640F1D ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub);
08B4: 0xA0641107 ; 22D: pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub);
08B8: 0xA06998F8 ; 22E: OpenExplorer(ExplOpenDesc *);
08BC: 0xA8DA8158 ; 22F: TDateTimeSettings *RamDateTimeSettings;

08C0: 0xA08CF389 ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone);
08C4: 0xA8DA8100 ; 231: TAppointment *RamAppointment;
08C8: 0xA0091D7B ; 232: GBS_DestroyMessage(GBS_MSG *);
08CC: 0xA07AD93F ; 233: void GetAllEmail();
;08D0: 0x ; 234: arm int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate);
;08D4: 0x ; 235: arm int GetLunarYearID(int year);
;08D8: 0x ; 236: arm int GetLunarAnimal(int year);
08DC: 0xA8E950A0 ; 237: char *RamIconBar;
08E0: 0xA092D293 ; 238: __thumb void SendAutoUSSDack(void);
08E4: 0xA04E76F4 ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg);
08E8: 0xA04E7860 ; 23A: __unknown int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08EC: 0xA09585AB ; 23B: __thumb void DisableIconBar(int disable);
;08F0: 0x ; 23C: __arm int SetCurrentGPRSProfile(int profile);
08F4: 0xA0F2BFD1 ; 23D: __arm void MD5_Init(MD5_CTX *c);
08F8: 0xA0F2BC41 ; 23E: __arm void MD5_Update(MD5_CTX *c, const void *data, unsigned long len);
08FC: 0xA0F2BED9 ; 23F: __arm void MD5_Final(unsigned char *md, MD5_CTX *c);

0900: 0xA0F2C961 ; 240: __arm char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL);
0904: 0xA08CF5A7 ; 241: __arm void SetDateTime(TDate *, TTime *);
;0908: 0x ; 242: __arm void gb2ws(WSHDR *ws, const char *s, int len);
;090C: 0x ; 243: __arm void ws2gb(WSHDR *ws, char *s, int len);
0910: 0xA0E62BA1 ; 244: __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize);
0914: 0xA0E62C51 ; 245: __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5);
0918: 0xA0712CE8 ; 246: __arm int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder);
091C: 0xA097B2A9 ; 247: __thumb NetOff();
0920: 0xA8D8595A ; 248: char *RamFormatTrack();
0924: 0xA8D85BC2 ; 249: char *RamFreq();
0928: 0xA8D85D7A ; 24A: char *RamChannel();
092C: 0xA0954A8B ; 24B: __arm void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc);
0930: 0xA0658FA1 ; 24C: __thumb int GetPeripheryState (int device, int check_state);
0934: 0xA059A7F8 ; 24D: __arm int PlayMelody_SetPosition(int handle, int pos_ms);
0938: 0xA0633730 ; 24E: __arm void* GetPlayObjById(int handle);
093C: 0xA0CB7BD4 ; 24F: __arm int GetPlayObjPosition(void *playobj_3D0, int *pos_ms);

0940: 0xA0CB7914 ; 250: __arm int GetPlayObjDuration(void *playobj_3D0, int *pos_ms);
0944: 0xAD07CA84 ; 8251: unsigned int *RamSizeOfPart();
0948: 0xAD07CA0C ; 8252: unsigned int *RamSizeOfRecievedSendFile();
;094C: 0x ; 253: char *RamLastCallNum();
0950: 0xA0699924 ; 254: __arm int StartNativeExplorer(NativeExplorerData* data);
0954: 0xA095654B ; 255: __arm void MenuSetUserPointer(void *gui,void *user_pointer);
0958: 0xAD07CAF8 ; 8256: char *RamNameOfRecievedSendFile();
095C: 0xAD07C9E6 ; 8257: char *RamIsSendReceiveBT();
0960: 0xA094CF5D ; 258: __thumb int CalcBitmapSize(short w,short h, char typy);
0964: 0xA0CD01B0 ; 259: __arm HObj Obs_CreateObject(int uid, int unk1, int unk2, int unk3, int unk4, int unk6,unsigned int *ErrorNumber);
0968: 0xA0CBBA94 ; 25A: __arm Obs_DestroyObject(HObj hObj);
096C: 0xA0CCCC3C ; 25B: __arm int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path);
0970: 0xA0CCAEA0 ; 25C: __arm int Obs_GetInputImageSize (HObj hObj, short *w, short *h);
0974: 0xA0CCB01C ; 25D: __arm int Obs_SetOutputImageSize (HObj hObj, short w, short h);
0978: 0xA0CBB618 ; 25E: __arm int Obs_Start(HObj hObj);
097C: 0xA0CCC290 ; 25F: __arm int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img);

0980: 0xA0CCBE54 ; 260: __arm int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h);
0984: 0xA0CCB860 ; 261: __arm int Obs_SetRotation(HObj hObj, int angle);
0988: 0xA0CBB3DC ; 262: __arm int Obs_GetInfo (HObj hObj, int unk_0or1);
098C: 0xA0CCB60C ; 263: __arm Obs_SetScaling (HObj hObj, int unk5);
0990: 0xA0CD1968 ; 264: __arm int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler);
0994: 0xA0CBB7E0 ; 265: __arm int Obs_Pause (HObj hObj);
0998: 0xA0CBB99C ; 266: __arm int Obs_Resume (HObj hObj);
099C: 0xA0CBB8D0 ; 267: __arm int Obs_Stop (HObj hObj);
09A0: 0xA0CBB4E0 ; 268: __arm int Obs_Prepare (HObj hObj);
09A4: 0xA0D18248 ; 269: __arm int Obs_SetRenderOffset (HObj hObj,short x,short y);
09A8: 0xA0CB7B10 ; 26A: __arm int Obs_SetPosition (HObj hObj,int ms);
09AC: 0xA0CBBCA0 ; 26B: __arm int Obs_Mam_SetPurpose (HObj hObj,int ms);
09B0: 0xA0CC371C ; 26C: __arm int Obs_Sound_SetVolumeEx (HObj hObj, char vol, char delta);
09B4: 0xA0CC5124 ; 26D: __arm int Obs_Sound_GetVolume (HObj hObj, char *vol);


0A04: 0xA8EBC5B8 ; 8281: __thumb char *RamIsRunJava();
0A08: 0xA8EAAE54 ; 8282: __thumb char *RamIsRunCamera();***
0A0C: 0xA0680E6C ; 283: __arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename);
0A10: 0xA0D2C2C1 ; 284: __thumb int IsGPRS();
0A14: 0xA0D2C2C7 ; 285: __thumb int IsEDGE();
0A18: 0xA0D2343D ; 286: __thumb int GetSMSState();
0A1C: 0xA064248F ; 287: __thumb int BT_GetLocVisibility();
0A20: 0xA065F081 ; 288: __thumb int GetCurrAudioPath();
0A24: 0xA0D9A0D1 ; 289: __thumb int isDecryption();
0A28: 0xA8E374EC ; 828A: __thumb char *RamIsFileCache();
0A2C: 0xA8F09AE8 ; 828B: __thumb char *RamTotalHeapSize();
0A30: 0xA8F09B58 ; 828C: __thumb char *RamTemporaryHeapSize();***
0A34: 0xA8DA2634 ; 828D: __thumb char *RamBTNameDevice();
0A38: 0xA8DA181C ; 828E: __thumb char *RamActiveGPRSProfileName();
;0A3C: 0x  ; 828F: __thumb char *RamIsNumberTyping();

0A40: 0xA8EF6DF0 ; 8290: __thumb char *RamCallState();
0A44: 0xA05C5ACC ; 291: int RefreshAlarmClock();
0A48: 0xA05C5ACC ; 292: int RefreshAlarmClock();
0A4C: 0xA8F5B968 ; 8293: __swi __arm char *RamIsAlarmAutorepeatOn();
0A50: 0xA8F5B964 ; 8294: __swi __arm char *RamAlarmclockHour();
0A54: 0xA8F5B964 ; 8295: __swi __arm char *RamAlarmclockMinute();
0A58: 0xA05ADAD3 ; 296: __thumb void getProfileNameByN(int n, WSHDR *ws, int _0);
0A5C: 0xA8F53DB4 ; 8297: char *RamIsSoundRecord();
0A60: 0xA8F53E10 ; 8298: char *RamIsSoundRecordQuality();
0A64: 0xA8E37860 ; 8299: char *RamExtendedCameraState();
0A68: 0xA05B8FD1 ; 29A: SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001);
0A6C: 0xA05BFBF9 ; 29B: GetTypeOfBTHeadset;
0A70: 0xA8DA7D75 ; 829C: char *RamInputLanguage();
0A74: 0xA8DF388C ; 829D: char *RamDisplayLanguage();


0A80: 0xA05C56F8 ; 2A0: int GetAlarmclockState(int state); 
;0A84: 0x ; 2A1: 
;0A88: 0x ; 2A2:
0A8C: 0xA0953319 ; 2A3: __thumb void UpdateMenuCursorItem(void *gui, int n);
0A90: 0xA0950125 ; 2A4: __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr); 
0A94: 0xA0957479 ; 2A5: __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr); 
0A98: 0xA094F739 ; 2A6: __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr); 
0A9C: 0xA09540DB ; 2A7: __thumb void SetMenuToGUI(void *gui, const void *menu_desc);
0AA0: 0xA0950F33 ; 2A8: __thumb int GetMenuItemCount(void *gui);
0AA4: 0xA094E8C1 ; 2A9: __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg);
0AA8: 0xA094E803 ; 2AA: __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg);
0AAC: 0xA09572F9 ; 2AB: __thumb void *GetPopupUserPointer(void *gui);
0AB0: 0xA0B57217 ; 2AC: __thumb int DeleteSMS(int index, int _1);
0AB4: 0xA0B575C5 ; 2AD: __thumb int SetSmsStatus(int index, int type);
0AB8: 0xA0954E3D ; 2AE: __unknown void *GetHeaderPointer(void *gui);
0ABC: 0xA0A2819D ; 2AF: __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr);

0AC0: 0xA0956031 ; 2B0: __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n);
0AC4: 0xA8EB9A84 ; 82B1: __arm SMS_DATA_ROOT *SmsDataRoot(); 
0AC8: 0xA0D35895 ; 2B2: __thumb int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id);
0ACC: 0xA05FEB9D ; 2B3: __thumb NativeAbData *AllocNativeAbData(void);
0AD0: 0xA05FEC45 ; 2B4: __thumb int FreeNativeAbData(NativeAbData *ab_data);
0AD4: 0xA05FEDF7 ; 2B5: __thumb int GetNativeAbDataType(NativeAbData *nab, int unk0);
0AD8: 0xA05FF207 ; 2B6: __thumb WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0);
0ADC: 0xA05FEE0B ; 2B7: __thumb int GetNativeAbDataStatus(NativeAbData *nab, int _0);
0AE0: 0xA05FF37D ; 2B8: __thumb int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num);
0AE4: 0xA06D62FB ; 2B9: __thumb unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data);
0AE8: 0xA0A283F7 ; 2BA: __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr);
0AEC: 0xA0A251B7 ; 2BB: __arm void *GetTabGUI(void *malloc_adr, void *mfree_adr);
0AF0: 0xA0A22105 ; 2BC: __arm void SetGUIDefinition(void *gui, const void *definition);
0AF4: 0xA0A2566B ; 2BD: __arm int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui);
0AF8: 0xA0A25787 ; 2BE: __arm int SetCursorTab(void *tab_gui, int n);
0AFC: 0xA0A258E9 ; 2BF: __arm int UpdateTab1stItem(void *tab_gui, int unk_0);

0B00: 0xA0A257A5 ; 2C0: __arm int GetCursorTab(void *tab_gui);
0B04: 0xA0A25221 ; 2C1: __arm void *GetGuiByTab(void *tab_gui, int n);
0B08: 0xA08C9CD9 ; 2C2: __arm int GetSubprovider(WSHDR* ws);
0B0C: 0xA08C9F0D ; 2C3: __arm int GetRoamingState();
0B10: 0xA05AD539 ; 2C4: __arm int GetPrfileVolumeSetting(int profile, int type);
0B14: 0xA8E69A24 ; 82C5: __swi __arm RAM_EMS_ADMIN *RAM_EMS_Admin();
0B18: 0xA058A283 ; 2C6: int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date);
0B1C: 0xA058A2D5 ; 2C7: int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time);
0B20: 0xA058A75F ; 2C8: int GetSecondsFromTime(*TTime time);
0B24: 0xA058A1BD ; 2C9: int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date);
0B28: 0xA058A2F7 ; 2CA: int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time);
0B2C: 0xA058A771 ; 2CB: void GetTimeFromSeconds(TTime *time, int seconds);
0B30: 0xA058A163 ; 2CC: void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day);
0B34: 0xA058AB83 ; 2CD: void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec);
0B38: 0xA0589A8D ; 2CE: int CmpDates(TDate *date1, TDate *date2);
0B3C: 0xA058A700 ; 2CF: int CmpTimes(TTime *time1, TTime *time2);

0B40: 0xA0589ADD ; 2D0: int GetDaysFromMonth(TDate *date);
0B44: 0xA0589ABD ; 2D1: int IsLeapYear(TDate *date);
;0B48: 0x;  2D2: __thumb StartNativeBrowserCore();
0B4C: 0xA05FF477 ; 2D3: int GetFilledNAbDataCount(NativeAbData *nab);
0B50: 0xA05FEE21 ; 2D4: void *GetDataFromNAbData(NativeAbData *nab, int n);
0B54: 0xA092DBFF ; 2D5: void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen);
0B58: 0xA0957DDF ; 2D6: void *TViewGetGUI(void *malloc_adr, void *mfree_adr);
0B5C: 0xA09583DD ; 2D7: void TViewSetDefinition(void *gui, const TVIEW_DESC *);
0B60: 0xA0958367 ; 2D8: void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr);
0B64: 0xA095840B ; 2D9: void TViewSetUserPointer(void *gui,void *user_pointer);
0B68: 0xA0958411 ; 2DA: void *TViewGetUserPointer(void *gui);
0B6C: 0xA0788E1C ; 2DB: void SendMedia(WSHDR *file, WSHDR *path);
0B70: 0xA08CCD05 ; 2DC: __thumb void SaveMaxIllumination(int level);
0B74: 0xA08CCD2D ; 2DD: __thumb void SetIlluminationoffTimeout(int time_sec);
0B78: 0xA08CCEB9 ; 2DE: __thumb void IllumTimeRequest(int TimeMode, int Counter);
0B7C: 0xA08CCEEF ; 2DF: __thumb void IllumTimeRelease(int TimeMode, int Counter);
0B80: 0xA0A26A95 ; 2E0: IMGHDR *GetIMGHDRFromThemeCache(int index);
0B84: 0xA05026F8 ; 2E1: int GetExtUidByFileName_ws(WSHDR * fn);
0B88: 0xA04FAC7F ; 2E2: int wstrcmp(WSHDR*ws1,WSHDR*ws2);
0B8C: 0xA05D0EAC ; 2E3: int fexists(WSHDR* FileName);
0B90: 0xA05AD02D ; 2E4: int SettingsAE_Update_ws(WSHDR *,int set,char *entry,char *keyword);
0B94: 0xA05ACFEB ; 2E5: int SettingsAE_Read_ws(WSHDR *,int set,char *entry,char *keyword);
0B98: 0xA05ACF85 ; 2E6: int SettingsAE_SetFlag(int val,int set,char *entry,char *keyword);
0B9C: 0xA05ACF4F ; 2E7: int SettingsAE_GetFlag(int *res,int set,char *entry,char *keyword);
0BA0: 0xA05ACFCB ; 2E8: int SettingsAE_Update(int val,int set,char *entry,char *keyword);
0BA4: 0xA05ACF97 ; 2E9: int SettingsAE_Read(int *res,int set,char *entry,char *keyword);
0BA8: 0xA06412FD ; 2EA: void* SettingsAE_GetEntryList(int set);
0BAC: 0xA0641419 ; 2EB: int SettingsAE_RemoveEntry(int set,char *entry,int flag);
0BB0: 0xA04F445C ; 2EC: int i2c_transfer(I2C_MSG *msg);
0BB4: 0xA04F44B0 ; 2ED: int i2c_receive(I2C_MSG *msg);

;EP3

;Nucleus RTOS API

0C00: 0xA009CA14   ; 300: __arm NU_Create_Task
0C04: 0xA009CB30   ; 301: __arm NU_Delete_Task
0C08: 0xA009CB8C   ; 302: __arm NU_Reset_Task
0C0C: 0xA009CBAC   ; 303: __arm NU_Terminate_Task
0C10: 0xA009CCA8   ; 304: __arm NU_Resume_Task
0C14: 0xA009CCF0   ; 305: __arm NU_Suspend_Task
0C18: 0xA009CD2C   ; 306: __arm NU_Relinquish
0C1C: 0xA009CD50   ; 307: __arm NU_Sleep
0C20: 0xA009E098   ; 308: __arm NU_Change_Priority
0C24: 0xA009E0B0   ; 309: __arm NU_Change_Preemption
0C28: 0xA009E0CC   ; 30A: __arm NU_Change_Time_Slice
0C2C: 0xA00A2B18   ; 30B: __arm NU_Check_Stack
0C30: 0xA009C624   ; 30C: __arm NU_Current_Task_Pointer
0C34: 0xA00A0B54   ; 30D: __arm NU_Established_Tasks
0C38: 0xA00A0EF4   ; 30E: __arm NU_Task_Information
0C3C: 0xA00A0B7C   ; 30F: __arm NU_Task_Pointers
0C40: 0xA009D684   ; 310: __arm NU_Create_Mailbox
0C44: 0xA009D6B0   ; 311: __arm NU_Delete_Mailbox
0C48: 0xFFFFFFFF   ; 312: __arm NU_Reset_Mailbox
0C4C: 0xA009D6D0   ; 313: __arm NU_Send_To_Mailbox
0C50: 0xFFFFFFFF   ; 314: __arm NU_Broadcast_To_Mailbox
0C54: 0xA009D734   ; 315: __arm NU_Receive_From_Mailbox
0C58: 0xFFFFFFFF   ; 316: __arm NU_Established_Mailboxes
0C5C: 0xFFFFFFFF   ; 317: __arm NU_Mailbox_Information
0C60: 0xFFFFFFFF   ; 318: __arm NU_Mailbox_Pointers
0C64: 0xA00A06C8   ; 319: __arm NU_Create_Queue
0C68: 0xA00A0768   ; 31A: __arm NU_Delete_Queue
0C6C: 0xFFFFFFFF   ; 31B: __arm NU_Reset_Queue
0C70: 0xFFFFFFFF   ; 31C: __arm NU_Send_To_Front_Of_Queue
0C74: 0xA00A0788   ; 31D: __arm NU_Send_To_Queue
0C78: 0xFFFFFFFF   ; 31E: __arm NU_Broadcast_To_Queue
0C7C: 0xA00A082C   ; 31F: __arm NU_Receive_From_Queue
0C80: 0xA00A08DC   ; 320: __arm NU_Established_Queues
0C84: 0xA00A0994   ; 321: __arm NU_Queue_Information
0C88: 0xA00A08F0   ; 322: __arm NU_Queue_Pointers
0C8C: 0xFFFFFFFF   ; 323: __arm NU_Create_Pipe
0C90: 0xFFFFFFFF   ; 324: __arm NU_Delete_Pipe
0C94: 0xFFFFFFFF   ; 325: __arm NU_Reset_Pipe
0C98: 0xFFFFFFFF   ; 326: __arm NU_Send_To_Front_Of_Pipe
0C9C: 0xFFFFFFFF   ; 327: __arm NU_Send_To_Pipe
0CA0: 0xFFFFFFFF   ; 328: __arm NU_Broadcast_To_Pipe
0CA4: 0xFFFFFFFF   ; 329: __arm NU_Receive_From_Pipe
0CA8: 0xFFFFFFFF   ; 32A: __arm NU_Established_Pipes
0CAC: 0xFFFFFFFF   ; 32B: __arm NU_Pipe_Information
0CB0: 0xFFFFFFFF   ; 32C: __arm NU_Pipe_Pointers
0CB4: 0xA009DFB4   ; 32D: __arm NU_Create_Semaphore
0CB8: 0xA009DFEC   ; 32E: __arm NU_Delete_Semaphore
0CBC: 0xFFFFFFFF   ; 32F: __arm NU_Reset_Semaphore
0CC0: 0xA009E00C   ; 330: __arm NU_Obtain_Semaphore
0CC4: 0xA009E05C   ; 331: __arm NU_Release_Semaphore
0CC8: 0xFFFFFFFF   ; 332: __arm NU_Established_Semaphores
0CCC: 0xFFFFFFFF   ; 333: __arm NU_Semaphore_Information
0CD0: 0xFFFFFFFF   ; 334: __arm NU_Semaphore_Pointers
0CD4: 0xA009D520   ; 335: __arm NU_Create_Event_Group
0CD8: 0xA009D53C   ; 336: __arm NU_Delete_Event_Group
0CDC: 0xA0212740   ; 337: __arm NU_Set_Events
0CE0: 0xA009D55C   ; 338: __arm NU_Retrieve_Events
0CE4: 0xFFFFFFFF   ; 339: __arm NU_Established_Event_Groups
0CE8: 0xFFFFFFFF   ; 33A: __arm NU_Event_Group_Information
0CEC: 0xFFFFFFFF   ; 33B: __arm NU_Event_Group_Pointers
0CF0: 0xA009E0E4   ; 33C: __arm NU_Control_Signals
0CF4: 0xA009E104   ; 33D: __arm NU_Receive_Signals
0CF8: 0xA009E124   ; 33E: __arm NU_Register_Signal_Handler
0CFC: 0xA009E150   ; 33F: __arm NU_Send_Signals

0D00: 0xA009D824   ; 340: __arm NU_Create_Partition_Pool
0D04: 0xA009D8A8   ; 341: __arm NU_Delete_Partition_Pool
0D08: 0xA009D8C8   ; 342: __arm NU_Allocate_Partition
0D0C: 0xA009D92C   ; 343: __arm NU_Deallocate_Partition
0D10: 0xA009D964   ; 344: __arm NU_Established_Partition_Pools
0D14: 0xA009DA1C   ; 345: __arm NU_Partition_Pool_Information
0D18: 0xA009D978   ; 346: __arm NU_Partition_Pool_Pointers

0D1C: 0xA009D150   ; 347: __arm NU_Create_Memory_Pool
0D20: 0xA009D1E0   ; 348: __arm NU_Delete_Memory_Pool
0D24: 0xA009D200   ; 349: __arm NU_Allocate_Memory
0D28: 0xA009D28C   ; 34A: __arm NU_Deallocate_Memory
0D2C: 0xA009D2C4   ; 34B: __arm NU_Established_Memory_Pools
0D30: 0xA009D37C   ; 34C: __arm NU_Memory_Pool_Information
0D34: 0xA009D2D8   ; 34D: __arm NU_Memory_Pool_Pointers
0D38: 0xA00A2910   ; 34E: __arm NU_Control_Interrupts
0D3C: 0xA00A293C   ; 34F: __arm NU_Local_Control_Interrupts
0D40: 0xA00A2954   ; 350: __arm NU_Restore_Interrupts
0D44: 0xFFFFFFFF   ; 351: __arm NU_Setup_Vector
0D48: 0xA009C920   ; 352: __arm NU_Register_LISR
0D4C: 0xA009B2D8   ; 353: __arm NU_Activate_HISR
0D50: 0xA009CAC0   ; 354: __arm NU_Create_HISR
0D54: 0xA009CB30   ; 355: __arm NU_Delete_HISR
0D58: 0xA009C64C   ; 356: __arm NU_Current_HISR_Pointer
0D5C: 0xA00A0B68   ; 357: __arm NU_Established_HISRs
0D60: 0xA00A0DE0   ; 358: __arm NU_HISR_Information
0D64: 0xA00A0C20   ; 359: __arm NU_HISR_Pointers
0D68: 0xA021A61C   ; 35A: __arm NU_Protect
0D6C: 0xA021A6A8   ; 35B: __arm NU_Unprotect
0D70: 0xA009E868   ; 35C: __arm NU_Create_Timer
0D74: 0xA009E8DC   ; 35D: __arm NU_Delete_Timer
0D78: 0xA009E8FC   ; 35E: __arm NU_Reset_Timer
0D7C: 0xA009E960   ; 35F: __arm NU_Control_Timer
0D80: 0xA009E5A0   ; 360: __arm NU_Established_Timers
0D84: 0xA009E658   ; 361: __arm NU_Timer_Information
0D88: 0xA009E5B4   ; 362: __arm NU_Timer_Pointers
0D8C: 0xA00A3200   ; 363: __arm NU_Set_Clock
0D90: 0xA00A320C   ; 364: __arm NU_Retrieve_Clock
0D94: 0xA00A0B1C   ; 365: __arm NU_Release_Information
0D98: 0xA00A0B1C   ; 366: __arm NU_License_Information
0D9C: 0xFFFFFFFF   ; 367: __arm NU_Disable_History_Saving
0DA0: 0xFFFFFFFF   ; 368: __arm NU_Enable_History_Saving
0DA4: 0xFFFFFFFF   ; 369: __arm NU_Make_History_Entry
0DA8: 0xFFFFFFFF   ; 36A: __arm NU_Retrieve_History_Entry
0DAC: 0xFFFFFFFF   ; 36B: __arm NU_Create_Driver
0DB0: 0xFFFFFFFF   ; 36C: __arm NU_Delete_Driver
0DB4: 0xFFFFFFFF   ; 36D: __arm NU_Request_Driver
0DB8: 0xFFFFFFFF   ; 36E: __arm NU_Resume_Driver
0DBC: 0xFFFFFFFF   ; 36F: __arm NU_Suspend_Driver
0DC0: 0xFFFFFFFF   ; 370: __arm NU_Established_Drivers
0DC4: 0xFFFFFFFF   ; 371: __arm NU_Driver_Pointers
0DC8: 0xFFFFFFFF   ; 372: __arm NU_IS_SUPERVISOR_MODE
0DCC: 0xFFFFFFFF   ; 373: __arm NU_SUPERVISOR_MODE
0DD0: 0xA009B878   ; 374: __arm NU_USER_MODE
0DD4: 0xA8D95BD0   ; 8375: __arm NU_SUPERV_USER_VARIABLES

;<Reserved>

0E00: 0xA094F3ED   ; 380: WSHDR *GetClipBoard();
0E04: 0xA094F385   ; 381: int CopyWsToClipboard(WSHDR *src);
0E08: 0xA094F36D   ; 382: void ClearClipboard(void);
0E0C: 0xA09485D7   ; 383: int PushDRWOBJOnLAYER(DRWOBJ *, LCDLAYER *);
0E10: 0xA094A2DD   ; 384: int LCDRedrawLAYER(LCDLAYER *);
0E14: 0xA0095FDD   ; 385: GBSPROC *GetGBSProcAddress(short cepid);
0E18: 0xA0A12FBD   ; 386: void SetPropTo_obj0x17(DRWOBJ *,RECT *,int zero0,EIMGHDR *,int zero1,int zero2); 
0E1C: 0xA0945EB7   ; 387: LCDLAYER *GetLCDLAYERByCurCepID();
0E20: 0xA0A1186D   ; 388: void SetDepthBuffer(char depth); 
0E24: 0xA0A1181B   ; 389: void SetDepthBufferOnLCDLAYER(LCDLAYER *, char depth);

0E28: 0xFFFFFFFF   ; 38A: void *RamAudioHookProc()
0E2C: 0xA8D94F48   ; 38B: char *RamLastStoreString();

#pragma disable old_equal_ff
+0

;------------------------- end -------------------------



;locale=Russian_Russia.1251

;locale=Russian_Russia.1251;SWILIB_FUNC171,SWILIB_FUNC172
#pragma enable old_equal_ff
0x000745C4: 804432A16C4432A1
;SWILIB_FUNC19C
0x00074670: A54432A1
;SWILIB_FUNC1B8_1BB
0x000746E0: 40F6D9A844F6D9A8FCF5D9A850F6D9A8
;SWILIB_FUNC1E9
0x000747A4: 946132A1
;SWILIB_FUNC2EE_2F5
0x00074BB8: 004E32A1716032A1
0x00074BC0: 256132A1F56032A1CC4A32A1DC4A32A1
0x00074BD0: 7C4B32A1F04B32A1
;PATCH_EXT2_R7_1
#pragma disable old_equal_ff
0x005026AC: 10739FE5 668638EB
;PATCH_EXT2_R2
0x00502830: 8C219FE5 0B8638EB
;PATCH_EXT2_R7
0x00502A78: BC701FE5 738538EB
;PATCH_EXT2_IMPL
0x00502AFC: 3C211FE5 6A8738EB
0x00502B00: 001092E53C0051E31080BDA8010181E0 0000A0E10000A0E10000A0E10000A0E1
0x00502B10: 54311FE5011081E2001082E5800183E0 0000A0E10000A0E10000A0E10000A0E1
;PATCH_EXT2_R6
0x00502C5C: A0621FE5 FD8438EB
;PATCH_NO_BROWSE_TXT
0x006C697A: 0830 3030
;PATCH_ENABLE_ALTOPEN
0x0071CDD4: 0300001A 000057E3
;PATCH_SHOWMSG_BLF
0x007F9600: 79EA94A0 214932A1
;PATCH_ONCREATE
0x0084B698: 79D166A0 F04632A1
;PATCH_ONCLOSE
0x0084B6AC: B9D366A0 B04432A1
;PATCH_ESI1
0x008D5FF4: D4A201FA 08F09FE5
;PATCH_ESI2
0x008D6004: 7C25647C 044032A1
;PATCH_GET_PIT
0x0094CE9A: 10B5041C 01490847
;PATCH_GET_PITJ
0x0094CEA0: F2E9A042 104032A1
;FSWI_PATCH2
0x012D1328: 63685F41 884032A1
;FSWI_PATCH1
0x012D1414: 2C0000EA F4F01FE5
;CODE,INITTAB,DATA_C,CONFIG_DATA_ID
#pragma enable old_equal_ff
0x01324000: 11FF2FE1070200EB0100A0E3F081BDE8
0x01324010: 10402DE90040A0E1120A00EB000050E3
0x01324020: 1080BD180400A0E114C09FE500C09CE5
0x01324030: 3CFF2FE1040050E108C09FE500C09CE5
0x01324040: 1CFF2FE1246B32A1286B32A11C709FE5
0x01324050: 007097E51EFF2FE110609FE5006096E5
0x01324060: 1EFF2FE104209FE5002092E51EFF2FE1
0x01324070: 40F6D9A800402DE9B80000EF0100A0E1
0x01324080: 0080BDE81EFF2FE100109DE5200011E3
0x01324090: 192F8F020400000AC70050E3B200DE00
0x013240A0: 14E08D0501E08EE251208FE250109FE5
0x013240B0: 001091E5000051E348109F05803CC0E3
0x013240C0: 400D53E30900008A800C10E300402D09
0x013240D0: 0040FD0803C191E704C08D150300001A
0x013240E0: 01007CE320209F0504008D0514208DE5
0x013240F0: 0100BDE800F069E10F80FDE81CFF2FE1
0x01324100: 60470000FCF5D9A8004007A0404932A1
0x01324110: 04E02DE500200FE1040000EF00100FE1
0x01324120: C01081E301F021E10000A0E10000A0E1
0x01324130: 0000A0E17AFF17EE0000A0E10000A0E1
0x01324140: 0000A0E1FAFFFF1A0000A0E39A0F07EE
0x01324150: 0000A0E10000A0E10000A0E10000A0E1
0x01324160: 0000A0E10000A0E1150F07EE0000A0E1
0x01324170: 0000A0E10000A0E10000A0E10000A0E1
0x01324180: 0000A0E102F021E104F09DE4F14F2DE9
0x01324190: 04519FE504019FE504719FE504D04DE2
0x013241A0: 056040E004009DE50040A0E30D30A0E1
0x013241B0: 8020A0E3801CA0E30A0000EF00A0A0E1
0x013241C0: 0480E0E108005AE11300000A0D30A0E1
0x013241D0: 0620A0E10710A0E10B0000EF0090A0E1
0x013241E0: 0D00A0E101002DE904308DE20220A0E3
0x013241F0: 0010A0E30A00A0E10F0000EF00B0A0E1
0x01324200: 04108DE20A00A0E10D0000EF0B0059E1
0x01324210: 04D08DE2060059011700000A0620A0E1
0x01324220: 0510A0E10700A0E11E0100EF04009DE5
0x01324230: 0D30A0E1602FA0E30210A0E3C01F81E3
0x01324240: 0A0000EF00A0A0E108005AE10F00000A
0x01324250: 0D30A0E10620A0E10710A0E10C0000EF
0x01324260: 060050E10840A0110D10A0E10A00A0E1
0x01324270: 0D0000EF000054E30200004A24009FE5
0x01324280: 04109DE5001080E50400A0E1F68FBDE8
0x01324290: 0840A0E10400A0E1F68FBDE8886E32A1
0x013242A0: EC7132A178F1D9A8F8F5D9A801C08FE2
0x013242B0: 1CFF2FE110B5054C20001C30FFF766EF
0x013242C0: 002802D52000FFF762EF10BD446B32A1
0x013242D0: 7847C04600402DE91D0100EF0080BDE8
0x013242E0: 00402DE9480100EF0080BDE8F0472DE9
0x013242F0: 0050A0E190909FE50160A0E10270A0E1
0x01324300: 0380A0E1560200EB0040B0E10400001A
0x01324310: 0910A0E10100A0E3480100EF0000E0E3
0x01324320: F087BDE88D0200EB00A0B0E10600001A
0x01324330: 101089E20100A0E3480100EF0400A0E1
0x01324340: 8F0200EB0100E0E3F087BDE86FFFFFEB
0x01324350: 0830A0E10720A0E10610A0E10500A0E1
0x01324360: 3AFF2FE1D900D4E5000050E3D0009405
0x01324370: 000050030200001A000084E50400A0E1
0x01324380: 7F0200EB0000A0E3F087BDE8506C32A1
0x01324390: D5FFFFEA08009FE50120A0E3101080E2
0x013243A0: C90100EA746C32A110B5A0B069461400
0x013243B0: 7E22A3DF0023002221006846FFF7E8EF
0x013243C0: 002801D0002000E0012020B010BD0000
0x013243D0: 00402DE914D04DE20D00A0E1530100EF
0x013243E0: 000050E31200000A04309DE508009DE5
0x013243F0: 010053E30600001A0C209DE5000052E3
0x01324400: 0B00000A10109DE532FF2FE114D08DE2
0x01324410: 0080BDE801002DE904209DE5AE10A0E3
0x01324420: DE1C81E30900A0E3420C80E3000100EF
0x01324430: 04D08DE214D08DE20080BDE800402DE9
0x01324440: 1C209FE51C109FE50000A0E301002DE9
0x01324450: 8030A0E30A00A0E3440C80E3050100EF
0x01324460: 0180BDE8D04332A1A06C32A100402DE9
0x01324470: 460100EF410100EF470100EF0080BDE8
0x01324480: 00402DE904002DE90030A0E10A00A0E3
0x01324490: 440C80E30120A0E10110A0E3000100EF
0x013244A0: 0180BDE810B514008847200015DF10BD
0x013244B0: 10402DE90040A0E10A00A0E3440C80E3
0x013244C0: 540100EFC90100EB0C009FE5001090E5
0x013244D0: 0400A0E11040BDE8C8FEFFEA186B32A1
0x013244E0: 94109FE510402DE948D04DE240DE4DE2
0x013244F0: D20F8DE21A0000EFD20F8DE21B0000EF
0x01324500: 78109FE50040A0E1D20F8DE2170000EF
0x01324510: 0D20A0E1D21F8DE204008DE26B0000EF
0x01324520: 000050E30E00000AD20F8DE20010A0E3
0x01324530: 0010C4E7B9108DE2170000EF0030A0E3
0x01324540: 0020A0E30210A0E1D20F8DE266FFFFEB
0x01324550: 0D10A0E104008DE26C0000EF000050E3
0x01324560: F0FFFF1A0D10A0E104008DE26D0000EF
0x01324570: 48D08DE240DE8DE21080BDE8B0F3D9A8
0x01324580: 486C32A110B58BB06A460024E44301A9
0x01324590: 84DFA04201D1200000E002980BB010BD
0x013245A0: 38119FE5F0402DE934419FE578D04DE2
0x013245B0: 005094E504008DE21A0000EF000055E3
0x013245C0: 0300000A0000A0E3000084E50500A0E1
0x013245D0: 150000EF04008DE2E9FFFFFA0050E0E3
0x013245E0: 050050E13B00000AF8609FE5400C50E3
0x013245F0: 0300000A2C1086E20100A0E3480100EF
0x01324600: 190000EA0D30A0E18020A0E3801CA0E3
0x01324610: 04008DE20A0000EF0070A0E1050057E1
0x01324620: 2C00000A400CA0E3140000EF0050A0E1
0x01324630: 0D30A0E1402CA0E30510A0E10700A0E1
0x01324640: 0B0000EF400C50E30D10A0E10700A0E1
0x01324650: 0700000A0D0000EF181086E20100A0E3
0x01324660: 480100EF0500A0E1150000EF78D08DE2
0x01324670: F080BDE80D0000EF0070A0E30700E0E1
0x01324680: 64109FE5072195E7000052E107219117
0x01324690: 0000521107319517020053110500000A
0x013246A0: 0720A0E10610A0E144008DE2160000EF
0x013246B0: 44108DE2E8FFFFEA072195E7000052E1
0x013246C0: 0711910707118507017087E2400D57E3
0x013246D0: EAFFFFBA005084E578D08DE2F080BDE8
0x013246E0: 5CF4D9A8FCF5D9A8046C32A1004007A0
0x013246F0: F0402DE988509FE588609FE588709FE5
0x01324700: 0040A0E14CFFFFEBE7FEFFEBA3FFFFEB
0x01324710: F10800EB1EFFFFEB0720A0E1101086E2
0x01324720: 0500A0E1160000EF0720A0E10610A0E1
0x01324730: 200085E2160000EF200086E28C0000EF
0x01324740: DF8000EF0000D0E5230050E30700000A
0x01324750: 38009FE5000090E5000050E30200000A
0x01324760: 2C009FE5710100EF000000EA5BFFFFEB
0x01324770: 20009FE5001090E50400A0E11FFEFFEB
0x01324780: F080BDE800F6D9A8BC6B32A104F3D9A8
0x01324790: 94F2D9A8E04432A11C6B32A1A82801D1
0x013247A0: 12487047AA2801D111487047AF2801D1
0x013247B0: 10487047B82801D10F487047BA2801D1
0x013247C0: 0E487047BF2801D10D487047B22801D1
0x013247D0: 0C487047B32801D10B487047C02804DB
0x013247E0: FF2802DCD42189004018704701040000
0x013247F0: 04040000070400005104000054040000
0x01324800: 57040000060400005604000030B50400
0x01324810: 0D0004E0FFF7C2FF010028001CDF2078
0x01324820: 641C0028F6D130BD30402DE90040A0E1
0x01324830: 0250A0E1250EA0E10A0050E30600001A
0x01324840: 0010A0E30400A0E1260100EF0410A0E1
0x01324850: 0500A0E1ECFFFFFA3080BDE808109FE5
0x01324860: 0400A0E1240100EF3080BDE8A06B32A1
0x01324870: 30402DE90040A0E10F00A0E3250100EF
0x01324880: 0050A0E1071F8FE2240100EF0020A0E3
0x01324890: 0510A0E10400A0E1940000EF0500A0E1
0x013248A0: 290100EF3080BDE874787400F0432DE9
0x013248B0: 60609FE560709FE5460100EF004096E5
0x013248C0: 008097E5019084E22810A0E3910900E0
0x013248D0: 140000EF0050A0E1000058E30600000A
0x013248E0: 2800A0E3900402E00810A0E10500A0E1
0x013248F0: 1E0100EF0800A0E1150000EF009086E5
0x01324900: 005087E5470100EF0A00A0E3900401E0
0x01324910: 010185E0F083BDE874F1D9A840F6D9A8
0x01324920: 054A00B5914203D0044A1268904700BD
0x01324930: 3000FFF79EEF00BDD11D0000206B32A1
0x01324940: 10402DE940409FE520D04DE20030A0E1
0x01324950: 0020A0E1181084E20D00A0E1160000EF
0x01324960: 0D00A0E1CDA0C6EB020000EF0230A0E3
0x01324970: 0220A0E30410A0E1FF00A0E3FF0C80E3
0x01324980: 13A1C6EB20D08DE21080BDE87C6B32A1
0x01324990: 0120F0E5010052E100005213FBFFFF1A
0x013249A0: 1EFF2FE1F44F2DE9B0829FE50040A0E1
0x013249B0: 0150A0E13D10A0E3F4FFFFEB00B098E5
0x013249C0: 046040E00070E0E30090A0E300A0A0E3
0x013249D0: 00005BE32C00001A02008AE20011A0E1
0x013249E0: 040098E5BA0000EF00B0B0E12200000A
0x013249F0: 001098E5040098E5000051E10200000A
0x01324A00: 0A21A0E10B00A0E11E0100EF00B088E5
0x01324A10: 0B00A0E1040088E50AB18BE000908BE5
0x01324A20: 04908BE50490A0E1000055E31000000A
0x01324A30: 0500A0E11B0000EF018080E2060088E0
0x01324A40: 010080E2140000EF0090B0E10A00000A
0x01324A50: 0620A0E10410A0E11E0100EF090086E0
0x01324A60: 3D10A0E30110C0E40820A0E10510A0E1
0x01324A70: 1E0100EF00908BE50070A0E30700A0E1
0x01324A80: F28FBDE801A08AE204B08BE200009BE5
0x01324A90: 000050E3CFFFFF0A0620A0E10410A0E1
0x01324AA0: 150100EF000050E3F5FFFF1A00009BE5
0x01324AB0: 0000D6E73D0050E3F1FFFF1A00009DE5
0x01324AC0: 000050E3D6FFFF1AEAFFFFEA000051E3
0x01324AD0: 00108F02B2FFFFEA0000000070402DE9
0x01324AE0: 0040B0E10000D415000050130500000A
0x01324AF0: 3D10A0E30400A0E1A4FFFFEB0010D0E5
0x01324B00: 3D0051E30100001A0000E0E37080BDE8
0x01324B10: 045040E044019FE5006090E5000056E3
0x01324B20: 0700001A0000A0E37080BDE80600A0E1
0x01324B30: 041090E5001080E5041090E4000051E3
0x01324B40: FAFFFF1A000096E5000050E37080BD08
0x01324B50: 0520A0E10410A0E1150100EF000050E3
0x01324B60: 0300001A000096E50000D5E73D0050E3
0x01324B70: EDFFFF0A046086E2F1FFFFEA70402DE9
0x01324B80: 0040A0E1D4009FE5005090E5000055E3
0x01324B90: 0100001A0000A0E37080BDE80400A0E1
0x01324BA0: 1B0000EF0060A0E1000000EA045085E2
0x01324BB0: 001095E5000051E3F5FFFF0A0620A0E1
0x01324BC0: 0400A0E11C0100EF000050E3F6FFFF1A
0x01324BD0: 000095E50000D6E73D0050E3F2FFFF1A
0x01324BE0: 000095E5000086E0010080E27080BDE8
0x01324BF0: 70402DE964409FE5040094E5000050E3
0x01324C00: 0100A0037080BD08000090E50060A0E3
0x01324C10: 0050A0E3000050E30500001A090000EA
0x01324C20: 0100A0E1150000EF040094E5065180E7
0x01324C30: 016086E2040094E5060180E0001090E5
0x01324C40: 000051E3F5FFFF1A040094E5150000EF
0x01324C50: 045084E5005084E50000A0E37080BDE8
0x01324C60: DCF4D9A8F0402DE9EC409FE534D04DE2
0x01324C70: 0430A0E18020A0E3801CA0E30A0000EF
0x01324C80: 0050A0E10060E0E3060055E12F00000A
0x01324C90: 0430A0E13420A0E30D10A0E10B0000EF
0x01324CA0: 340050E32600001A0D00A0E15A0000EB
0x01324CB0: 000050E32200001AE400A0E3140000EF
0x01324CC0: 0070B0E11E00000A3420A0E30D10A0E1
0x01324CD0: 080087E21E0100EF3C6087E5D45087E5
0x01324CE0: 0000A0E3000087E5F011DDE14010C7E5
0x01324CF0: D00087E5C80087E5D800C7E5D900C7E5
0x01324D00: DC0087E5FF8000EFE00087E50700A0E1
0x01324D10: B50200EB000050E30700001A0100A0E3
0x01324D20: D800C7E50410A0E10500A0E10D0000EF
0x01324D30: 0700A0E134D08DE2F080BDE80700A0E1
0x01324D40: 0F0000EB0410A0E10500A0E10D0000EF
0x01324D50: 0000A0E334D08DE2F080BDE8E4F4D9A8
0x01324D60: 000050E31EFF2F013C1090E5202090E5
0x01324D70: 000090E5001061E2000082E0000081E0
0x01324D80: 1EFF2FE130402DE90040B0E10700A003
0x01324D90: 3080BD08D800D4E5000050E30800000A
0x01324DA0: 0400A0E12E0300EB050000EA000095E5
0x01324DB0: 830400EB040095E5D00084E50500A0E1
0x01324DC0: 150000EFD05094E5000055E3F6FFFF1A
0x01324DD0: C80094E5000050E30000000A150000EF
0x01324DE0: 000094E5000050E30000000A150000EF
0x01324DF0: 0400A0E1150000EF0000A0E33080BDE8
0x01324E00: 00402DE90010A0E108009FE5710100EF
0x01324E10: 0000A0E30080BDE8844D32A130109FE5
0x01324E20: 10402DE90720A0E30040A0E11C0100EF
0x01324E30: 000050E30400A0131080BD18F201D4E1
0x01324E40: 280050E30900A0131080BD180000A0E3
0x01324E50: 1080BDE8586E32A1F0402DE90040A0E1
0x01324E60: 0250B0E11B00000AF06B9FE50020A0E3
0x01324E70: 0600A0E101002DE93C0094E50630A0E1
0x01324E80: 001041E0D40094E50F0000EF000050E3
0x01324E90: 04D08DE20F00000A010085E2140000EF
0x01324EA0: 0070A0E1D40094E50630A0E10520A0E1
0x01324EB0: 0710A0E10B0000EF050050E10300001A
0x01324EC0: 0000A0E30700C5E70700A0E1F080BDE8
0x01324ED0: 0700A0E1150000EF0000A0E3F080BDE8
0x01324EE0: B04F2DE962DF4DE20050A0E1000091E5
0x01324EF0: 0280A0E10070A0E30040A0E3000050E3
0x01324F00: 0E00001A5C0095E5000050E31F00000A
0x01324F10: 3C0095E55C1095E5002095E5000060E2
0x01324F20: 021081E0010080E0180000EA002090E5
0x01324F30: 040090E5022185E0440082E5017087E2
0x01324F40: 870181E0002090E5000052E3ECFFFF0A
0x01324F50: 1F0052E3F8FFFFAA012052E20600000A
0x01324F60: 0F2052E2F0FFFF1A000090E50120A0E3
0x01324F70: 000185E0442080E5EFFFFFEA040090E5
0x01324F80: 08208DE2040182E7014084E2EAFFFFEA
0x01324F90: C00085E53C0095E5A01095E5002095E5
0x01324FA0: 000060E2021081E0010080E0C40085E5
0x01324FB0: 580095E5000050E30400000A3C0095E5
0x01324FC0: 581095E5000060E2021081E0010080E0
0x01324FD0: CC0085E54000D5E5020050E31800001A
0x01324FE0: 541095E50820A0E30500A0E199FFFFEB
0x01324FF0: 0070B0E10D00000A000097E5041097E5
0x01325000: 000081E00810A0E3002181E0541095E5
0x01325010: 0500A0E18FFFFFEBC80085E50700A0E1
0x01325020: 150000EFC80095E5000050E30400001A
0x01325030: 8C179FE50100A0E3480100EF0F00A0E3
0x01325040: 8B0100EA0070A0E3020000EA041080E5
0x01325050: D00085E5017087E2040057E11600002A
0x01325060: CC1095E508008DE2070190E7019080E0
0x01325070: 0510A0E10900A0E1290300EB00A0B0E1
0x01325080: 0400000A0800A0E3140000EF00A080E5
0x01325090: D01095E5ECFFFFEA28179FE50920A0E1
0x013250A0: 420F8DE2160000EF421F8DE20100A0E3
0x013250B0: 8AFCFFEB0300A0E36D0100EA421F8DE2
0x013250C0: 00108DE58C0095E5000050E36C01000A
0x013250D0: 881095E50020A0E1040098E50070A0E3
0x013250E0: 000081E0081098E50040A0E3011040E0
0x013250F0: 0500A0E157FFFFEB0080B0E19700001A
0x01325100: 0500A0E11EFFFFEB580100EA0090A0E3
0x01325110: 04908DE50230A0E1FD0053E34B01008A
0x01325120: 029F8FE28330A0E1B39099E109F18FE0
0x01325130: 8A0047019C0047014701470147014701
0x01325140: 47014701470147014701470147014701
0x01325150: 47014701470147014701F70047017E00
0x01325160: 47014701470147014701470147014701
0x01325170: 47014701470147014701470147014701
0x01325180: 47014701470147014701470147014701
0x01325190: 47014701470147014701470147014701
0x013251A0: 47014701470147014701470147014701
0x013251B0: 47014701470147014701470147014701
0x013251C0: 47014701470147014701470147014701
0x013251D0: 47014701470147014701470147014701
0x013251E0: 47014701470147014701470147014701
0x013251F0: 47014701470147014701470147014701
0x01325200: 47014701470147014701470147014701
0x01325210: 47014701470147014701470147014701
0x01325220: 47014701470147014701470147014701
0x01325230: 47014701470147014701470147014701
0x01325240: 47014701470147014701470147014701
0x01325250: 47014701470147014701470147014701
0x01325260: 47014701470147014701470147014701
0x01325270: 47014701470147014701470147014701
0x01325280: 47014701470147014701470147014701
0x01325290: 47014701470147014701470147014701
0x013252A0: 47014701470147014701470147014701
0x013252B0: 47014701470147014701470147014701
0x013252C0: 47014701470147014701470147014701
0x013252D0: 47014701470147014701470147014701
0x013252E0: 47014701470147014701470147014701
0x013252F0: 47014701470147014701470147014701
0x01325300: 47014701470147014701470147014701
0x01325310: 47014701470147014701470147014701
0x01325320: 470147014701470147017E003C1095E5
0x01325330: 000090E5002095E5001061E2020080E0
0x01325340: 009081E0000099E53C1095E5001061E2
0x01325350: 021081E0000081E0000089E5017087E2
0x01325360: 8C0095E5870150E1C300009AC01095E5
0x01325370: 870188E0042090E5000051E3FF2002E2
0x01325380: 61FFFF0A041090E5C03095E52114A0E1
0x01325390: 011293E05CFFFF0A0C90D1E52992A0E1
0x013253A0: 5AFFFFEA3C2095E5000090E5003095E5
0x013253B0: 002062E2030080E0009082E0C00095E5
0x013253C0: 000050E30400001AFC139FE5420F8DE2
0x013253D0: 160000EF000095E5DEFFFFEACC0095E5
0x013253E0: 000050E30100001AE0139FE5F6FFFFEA
0x013253F0: 000091E5CC1095E501A080E00400DAE5
0x01325400: 000050E30000DA055F0050030100DA05
0x01325410: 5F0050030200DA05650050030300DA05
0x01325420: 780050030300001A0100A0E3D900C5E5
0x01325430: 005089E5C8FFFFEA0A10A0E10500A0E1
0x01325440: B70100EB0040B0E10B00001AD04095E5
0x01325450: 0000A0E3030000EA000094E50A10A0E1
0x01325460: E30100EB044094E5000054E30100000A
0x01325470: 000050E3F7FFFF0A0040A0E1000054E3
0x01325480: 2000001A04009DE5020050E31D00000A
0x01325490: DC0095E5000050E30F00000A00B0A0E1
0x013254A0: 070000EA4000DBE5020050E30A00001A
0x013254B0: 0A10A0E10B00A0E1990100EBDCB09BE5
0x013254C0: 0040A0E100005BE30100000A000054E3
0x013254D0: F3FFFF0A000054E30A00001AF0129FE5
0x013254E0: 0A20A0E1420F8DE2160000EF00109DE5
0x013254F0: 0100A0E379FBFFEB0800A0E1150000EF
0x01325500: 0B00A0E35A0000EA004089E592FFFFEA
0x01325510: C02095E5000052E30900001AB4129FE5
0x01325520: 420F8DE2160000EF00109DE50100A0E3
0x01325530: 6AFBFFEB0800A0E1150000EF0C00A0E3
0x01325540: 4B0000EACC2095E5000052E30900001A
0x01325550: 84129FE5420F8DE2160000EF00109DE5
0x01325560: 0100A0E35DFBFFEB0800A0E1150000EF
0x01325570: 0D00A0E33E0000EA3C2095E5000090E5
0x01325580: 003095E5002062E2030080E0009082E0
0x01325590: 000091E5CC2095E502A080E0040091E5
0x013255A0: 030080E0000089E5040091E5000050E3
0x013255B0: 69FFFF1AD0B095E5030000EA00009BE5
0x013255C0: 0A10A0E18A0100EB04B09BE500005BE3
0x013255D0: 0100000A000050E3F7FFFF0A000089E5
0x013255E0: 000050E35CFFFF1A04009DE5020050E3
0x013255F0: 59FFFF0A000054E31000001ADC0095E5
0x01325600: 000050E30F00000A0090A0E1070000EA
0x01325610: 4000D9E5020050E30A00001A0A10A0E1
0x01325620: 0900A0E13E0100EBDC9099E50040A0E1
0x01325630: 000059E30100000A000054E3F3FFFF0A
0x01325640: 000054E344FFFF1A90119FE5A3FFFFEA
0x01325650: 8C119FE5420F8DE2160000EF00109DE5
0x01325660: 0100A0E31DFBFFEB0800A0E1150000EF
0x01325670: 0100A0E362DF8DE2B08FBDE80800A0E1
0x01325680: 150000EF4C0095E5000050E34A00000A
0x01325690: 0070A0E3040000EAC41095E5002095E5
0x013256A0: 871191E7017087E2020081E74C0095E5
0x013256B0: 870150E13F00009AC40095E5C01095E5
0x013256C0: CC2095E5870180E0040090E52004A0E1
0x013256D0: 001291E7024081E0C01095E5008281E0
0x013256E0: 4000D5E5020050E38400950500005003
0x013256F0: 0400001A0410A0E10500A0E1080100EB
0x01325700: 000050E30A00001AD09095E50000A0E3
0x01325710: 030000EA000099E50410A0E1340100EB
0x01325720: 049099E5000059E30100000A000050E3
0x01325730: F7FFFF0A000050E3D6FFFF1A0C10D8E5
0x01325740: 2112A0E1020051E3D2FFFF0ADC1095E5
0x01325750: 000051E30E00000A0180A0E1060000EA
0x01325760: 4000D8E5020050E30900001A0410A0E1
0x01325770: 0800A0E1EA0000EBDC8098E5000058E3
0x01325780: 0100000A000050E3F4FFFF0A000050E3
0x01325790: C0FFFF1A4C109FE50420A0E1420F8DE2
0x013257A0: 160000EF00109DE50100A0E3CBFAFFEB
0x013257B0: 0B00A0E3AEFFFFEA0000A0E362DF8DE2
0x013257C0: B08FBDE8B86C32A1D06C32A1E86C32A1
0x013257D0: 1C6D32A1506D32A1746D32A1AC6D32A1
0x013257E0: E46D32A1086E32A1346E32A1F04F2DE9
0x013257F0: 20D04DE20040A0E1F403D4E18002A0E1
0x01325800: 140000EF0050B0E18500000A24A094E5
0x01325810: 48829FE50090A0E30060A0E306B0A0E1
0x01325820: 0E0000EA000097E5010050E30800001A
0x01325830: 080097E53C1094E5010050E13C008435
0x01325840: 080097E5141097E5000081E000005BE1
0x01325850: 00B0A031F203D4E1019089E20AA080E0
0x01325860: F403D4E10670E0E1000059E1180000AA
0x01325870: 0800A0E101002DE9D40094E50830A0E1
0x01325880: 0020A0E30A10A0E10F0000EF070050E1
0x01325890: 04D08DE20E00000AD40094E5897285E0
0x013258A0: 0830A0E12020A0E30710A0E10B0000EF
0x013258B0: 200050E3DAFFFF0A000094E5150000EF
0x013258C0: 006084E50500A0E1150000EF0E00A0E3
0x013258D0: 540000EA3C0094E500004BE0040084E5
0x013258E0: F413D4E1010059E15400001A010080E2
0x013258F0: 140000EF000084E5000050E34F00000A
0x01325900: 041094E50090A0E3011081E270FAFFEB
0x01325910: 7C10A0E3440084E26DFAFFEB100000EA
0x01325920: 0C20A0E1000052E30C00000A04109DE5
0x01325930: 0400A0E147FDFFEB00A0B0E13100000A
0x01325940: 0D20A0E10A10A0E10400A0E163FDFFEB
0x01325950: 000050E32B00001A0A00A0E1150000EF
0x01325960: 019089E2F403D4E1000059E12F0000AA
0x01325970: 0D10A0E1890285E00C5CB0E80C5CA1E8
0x01325980: 0C0090E80C0081E800009DE5010050E2
0x01325990: 0200000A010050E2E0FFFF0AEFFFFFEA
0x013259A0: 00005CE3EDFFFF0A0800A0E101002DE9
0x013259B0: 08109DE5D40094E50830A0E10020A0E3
0x013259C0: 0F0000EF070050E104D08DE20F00000A
0x013259D0: 3C0094E508109DE500A094E510209DE5
0x013259E0: 0830A0E1000060E20A1081E0011080E0
0x013259F0: D40094E50B0000EF10109DE5010050E1
0x01325A00: D6FFFF0A010000EA0A00A0E1150000EF
0x01325A10: 000094E5150000EF006084E50500A0E1
0x01325A20: 150000EF0500A0E320D08DE2F08FBDE8
0x01325A30: 0500A0E1150000EF0000A0E3F9FFFFEA
0x01325A40: 000094E5150000EF006084E50500A0E1
0x01325A50: 150000EF0600A0E320D08DE2F08FBDE8
0x01325A60: E4F4D9A870402DE9AC1090E5000051E3
0x01325A70: 7080BD08B42090E50060A0E32241A0E1
0x01325A80: 3C2090E5000090E5002062E2000081E0
0x01325A90: 005082E0000054E30300001A7080BDE8
0x01325AA0: 060195E7016086E230FF2FE1040056E1
0x01325AB0: FAFFFF3A7080BDE800402DE90030A0E3
0x01325AC0: 8020A0E3801CA0E30A0000EF010070E3
0x01325AD0: 0300000A0010A0E30D0000EF0100A0E3
0x01325AE0: 0080BDE80000A0E30080BDE80020D0E5
0x01325AF0: 0010A0E3000052E30700000A0120D0E4
0x01325B00: 011282E0F02411E2222C221001102210
0x01325B10: 0020D0E5000052E3F7FFFF1A0100A0E1
0x01325B20: 1EFF2FE1F0472DE90040A0E1000054E3
0x01325B30: C80094150150A0E1000050130000A003
0x01325B40: F087BD080500A0E1E7FFFFEBC81094E5
0x01325B50: 0070A0E3002091E5088081E2021181E0
0x01325B60: 086081E20010A0E10200A0E140F9FFEB
0x01325B70: 008198E7000000EA088196E7000058E3
0x01325B80: 1900000AC00094E5080280E004A090E5
0x01325B90: 002090E50C90D0E500005AE3FE00D011
0x01325BA0: 00005013F3FFFF0A0F0009E2020050E3
0x01325BB0: F0FFFF8ACC0094E50510A0E1000082E0
0x01325BC0: 190000EF000050E3EAFFFF1A000094E5
0x01325BD0: 2912A0E100008AE0011051E2F087BD08
0x01325BE0: 011051E20070A001E2FFFFEA0700A0E1
0x01325BF0: F087BDE8000050E31EFF2F01400090E5
0x01325C00: C7FFFFEAF0412DE90040A0E10150A0E1
0x01325C10: 0260A0E1000054E3000055130100000A
0x01325C20: 000056E30100005A0000A0E3F081BDE8
0x01325C30: 3B10A0E3180000EF0470A0E10080A0E3
0x01325C40: 040000EA017090E20A00000A3B10A0E3
0x01325C50: 0700A0E1180000EF0610A0E1016041E2
0x01325C60: 000051E3000057130400000A000050E3
0x01325C70: F3FFFF1A0070A0E30000A0E3F5FFFFEA
0x01325C80: 000050E30400001A000057E3E5FFFF0A
0x01325C90: 0400A0E11B0000EF040080E0074040E0
0x01325CA0: 0420A0E10710A0E10500A0E11E0100EF
0x01325CB0: 0580C4E70500A0E1F081BDE8F0402DE9
0x01325CC0: 54709FE50040A0E150009FE50060A0E3
0x01325CD0: A9FBFFEB0050A0E1000000EA016086E2
0x01325CE0: 0620A0E1041087E20500A0E1C4FFFFEB
0x01325CF0: 000050E3F080BD080410A0E1040087E2
0x01325D00: 170000EF040087E26AFFFFEB000050E3
0x01325D10: F1FFFF0A040087E2F080BDE8E8F4D9A8
0x01325D20: 606E32A1F04F2DE93C739FE534D04DE2
0x01325D30: 004097E50050A0E10160A0E1000000EA
0x01325D40: 084094E5000054E30A00000A008094E5
0x01325D50: 0510A0E10800A0E1190000EF000050E3
0x01325D60: F6FFFF1A440098E5010080E2440088E5
0x01325D70: 0800A0E1670000EA0100D5E53A0050E3
0x01325D80: 0590A0010200000A0500A0E1CAFFFFEB
0x01325D90: 0090A0E124829FE5000059E300A0A0E3
0x01325DA0: 0600001A5A0000EA070089E004A0C0E5
0x01325DB0: 0810A0E10400A0E10D0000EF049087E2
0x01325DC0: 0830A0E18020A0E3801CA0E30900A0E1
0x01325DD0: 0A0000EF0040A0E10A90E0E1090050E1
0x01325DE0: 4B00000A0830A0E13420A0E30D10A0E1
0x01325DF0: 0B0000EF010050E3450000BA340050E3
0x01325E00: 0300003A0D00A0E103FCFFEB000050E3
0x01325E10: 1F00000A0800A0E101002DE90830A0E1
0x01325E20: 0220A0E30010A0E30400A0E10F0000EF
0x01325E30: 0090A0E1400F59E304D08DE2100000AA
0x01325E40: 010059E30E0000BA0800A0E101002DE9
0x01325E50: 0830A0E10020A0E30210A0E10400A0E1
0x01325E60: 0F0000EF0830A0E10920A0E1041087E2
0x01325E70: 0400A0E10B0000EF090050E104D08DE2
0x01325E80: C8FFFF0A0810A0E10400A0E10D0000EF
0x01325E90: 1F0000EAE400A0E3140000EF00B0B0E1
0x01325EA0: 1B00000A3420A0E30D10A0E108008BE2
0x01325EB0: 1E0100EF3C908BE5D4408BE50200A0E3
0x01325EC0: 4000CBE5D0A08BE5D8A0CBE5DC608BE5
0x01325ED0: FF8000EFE0008BE50B00A0E142FEFFEB
0x01325EE0: 000050E30810A0E10400A0E10100000A
0x01325EF0: 0D0000EF040000EA0D0000EF4C00A0E3
0x01325F00: 140000EF0040B0E10400001A0B00A0E1
0x01325F10: 9BFBFFEB0000A0E334D08DE2F08FBDE8
0x01325F20: 40B084E50160A0E3446084E57C009BE5
0x01325F30: 000050E3CC109B15011080100510A001
0x01325F40: 0400A0E11A0000EF0C00A0E3140000EF
0x01325F50: 000050E30200001A0400A0E1180000EB
0x01325F60: EBFFFFEA004080E504A080E5480084E5
0x01325F70: 001097E5000051E30400811500A09715
0x01325F80: 08A080E5000087E5D860CBE574109BE5
0x01325F90: 000051E30600000A3C209BE500309BE5
0x01325FA0: 0500A0E1002062E2031081E0011082E0
0x01325FB0: 31FF2FE10400A0E134D08DE2F08FBDE8
0x01325FC0: E4F4D9A830402DE90040B0E10700A003
0x01325FD0: 3080BD08440094E5010050E2440084E5
0x01325FE0: 1F00001A480094E5405094E5000050E3
0x01325FF0: 1700000A780095E5000050E30500000A
0x01326000: 3C1095E5002095E5001061E2020080E0
0x01326010: 000081E030FF2FE1480094E548209FE5
0x01326020: 041090E5003092E5030050E10030A003
0x01326030: 00308205000051E30820901508208115
0x01326040: 081090E5000051E30420901504208115
0x01326050: 150000EF0500A0E149FBFFEB0400A0E1
0x01326060: 150000EF0000A0E33080BDE8E8F4D9A8
0x01326070: F1B50024E443002801D1200038E0364D
0x01326080: 686800280BD1802040006860800014DF
0x01326090: 28600028F1D069688900FEF719F96968
0x013260A0: 002600E0761C28688E4205DAB2008258
0x013260B0: 002AF7D1A64211D140318900BADF0700
0x013260C0: 01D1200014E06E6880214900B0003818
0x013260D0: FEF7FEF868682F604030686000980021
0x013260E0: FFF720EE0028C8D02A68B10050503000
0x013260F0: 01B0F0BD10B50021002801D5012200E0
0x01326100: 0022154B5C68641E944201DA002010BD
0x01326110: 1A68800012181068002802D01160FFF7
0x01326120: 52EF10BD10B5002801D5012200E00022
0x01326130: 094B5C68641E944201DA002010BD1A68
0x01326140: 800010180268002A03D01000FFF752ED
0x01326150: 10BD002010BD0000F0F5D9A800B50800
0x01326160: 14DF00BD00B5080015DF00BD30402DE9
0x01326170: 04D04DE20140A0E10250A0E15E0100EF
0x01326180: 0D30A0E10520A0E10410A0E10B0000EF
0x01326190: 3180BDE8F04F2DE928D04DE20150A0E1
0x013261A0: 0060A0E300608DE50C608DE514308DE2
0x013261B0: 8020A0E3801CA0E30A0000EF0040A0E1
0x013261C0: 010070E33201000A0080A0E30670A0E1
0x013261D0: 0690A0E114308DE20820A0E320108DE2
0x013261E0: 0B0000EF080050E32001001A0810A0E3
0x013261F0: 20008DE2B20100EF000050E31B01000A
0x01326200: 20059FE501002DE91C059FE501002DE9
0x01326210: 0000A0E301002DE90030A0E10020A0E1
0x01326220: 0010A0E104059FE5A80100EF0C008DE5
0x01326230: 000050E30CD08DE20C01000A560100EF
0x01326240: 0C008DE5000050E30400001A0020A0E3
0x01326250: 0210A0E10D00A0E1570100EF030100EA
0x01326260: 00009DE5620100EF000050E30020A013
0x01326270: 0C108D12F6FFFF1AB4249FE500009DE5
0x01326280: 0410A0E1A90100EF00009DE50810A0E3
0x01326290: 580100EF0C109DE500009DE5590100EF
0x013262A0: 0000A0E301002DE901002DE901002DE9
0x013262B0: 1C008DE201002DE928008DE201002DE9
0x013262C0: 20109DE51C308DE214009DE518208DE2
0x013262D0: 5A0100EF000055E314D08DE20500001A
0x013262E0: 10009DE5000050E348049F15FF50A003
0x013262F0: 000090150150801218009DE5080050E3
0x01326300: 010000AA00009DE5D60100EF00009DE5
0x01326310: 0C109DE51020A0E3AC0100EF000050E3
0x01326320: 0100000A00009DE5AD0100EF18009DE5
0x01326330: 100050E30100001A00009DE5AF0100EF
0x01326340: 18009DE5080050E3010000AA00009DE5
0x01326350: B00100EF10009DE5030050E30100001A
0x01326360: 00009DE5AB0100EF10009DE5040050E3
0x01326370: 000050130100001A00009DE5B10100EF
0x01326380: 00009DE50120A0E3FF10A0E3AE0100EF
0x01326390: 0C109DE500009DE5AA0100EF00009DE5
0x013263A0: 0C109DE55F0100EF140000EF0080A0E1
0x013263B0: 0C00A0E3140000EF1C008DE50090A0E1
0x013263C0: 04009DE5FF0055E32F00001A070080E2
0x013263D0: A051A0E108009DE595000BE00B00A0E1
0x013263E0: 140000EF0070A0E10B10A0E11D0100EF
0x013263F0: 08009DE507A0A0E100B0A0E3000050E3
0x01326400: 1400001A0100A0E3890000EA001188E0
0x01326410: 0020D1E5000052E30120D10500005203
0x01326420: 0210D105000051030400001AA0118AE0
0x01326430: 0020D1E507C000E2332C82E10020C1E5
0x01326440: 010080E204109DE5010050E1EEFFFF3A
0x01326450: 0AA085E001B08BE208009DE500005BE1
0x01326460: E7FFFF2A00009DE50020A0E30810A0E1
0x01326470: 600100EF04109DE50600A0E1000051E3
0x01326480: 8030A0E3EEFFFF1AF0FFFFEA08109DE5
0x01326490: A4A29FE5910000E0015055E20400000A
0x013264A0: 015055E22C00000A015055E25700000A
0x013264B0: 600000EA140000EF0070A0E108009DE5
0x013264C0: 0750A0E100B0A0E3000050E30200001A
0x013264D0: 0500A0E3560000EA01B08BE208009DE5
0x013264E0: 00005BE1F9FFFF2A00009DE50020A0E3
0x013264F0: 0810A0E1600100EF04109DE50600A0E1
0x01326500: 000051E31CC0A0E30900001AF1FFFFEA
0x01326510: 0020D1E50130D1E50210D1E5E02002E2
0x01326520: A3310CE0022083E1211382E10110C5E4
0x01326530: 010080E204109DE5010050E1E5FFFF2A
0x01326540: 00309AE5001188E00320D1E5030052E1
0x01326550: EEFFFF2AC010A0E3F3FFFFEA8000A0E1
0x01326560: 140000EF0070A0E108009DE50750A0E1
0x01326570: 00B0A0E3000050E30200001A0800A0E3
0x01326580: 2B0000EA01B08BE208009DE500005BE1
0x01326590: F9FFFF2A00009DE50020A0E30810A0E1
0x013265A0: 600100EF04109DE50600A0E1000051E3
0x013265B0: 7ECEA0E30B00001AF1FFFFEA0020D1E5
0x013265C0: F83CA0E3022403E00130D1E50210D1E5
0x013265D0: 83310CE0022083E1A111A0E1021081E1
0x013265E0: B210C5E0010080E204109DE5010050E1
0x013265F0: E3FFFF2A00309AE5001188E00320D1E5
0x01326600: 030052E1ECFFFF2AE01CA0E3F3FFFFEA
0x01326610: 0001A0E1140000EF0070A0E108009DE5
0x01326620: 0750A0E100A0A0E3000050E32900001A
0x01326630: 0A00A0E3040089E504009DE5B000C9E1
0x01326640: 08009DE5B200C9E1087089E50C109DE5
0x01326650: 00009DE55D0100EF0020A0E30C108DE2
0x01326660: 0D00A0E1570100EF000057E32500001A
0x01326670: 0800A0E1150000EF0700A0E1150000EF
0x01326680: 0900A0E1150000EF14108DE20400A0E1
0x01326690: 0D0000EF0000A0E328D08DE2F08FBDE8
0x013266A0: 001188E00220D1E5010080E20120C5E4
0x013266B0: 0120D1E50120C5E40020D1E50120C5E4
0x013266C0: 0310D1E50110C5E404109DE5010050E1
0x013266D0: F2FFFF3A01A08AE208009DE500005AE1
0x013266E0: D2FFFF2A00009DE50020A0E30810A0E1
0x013266F0: 600100EF04109DE50600A0E1000051E3
0x01326700: F0FFFF1AF2FFFFEA0800A0E1150000EF
0x01326710: 14108DE20400A0E10D0000EF1C009DE5
0x01326720: 28D08DE2F08FBDE8656132A15D6132A1
0x01326730: 706E32A16C6132A104F2D9A8A4F1D9A8
0x01326740: 0A78002A0BD00A78412A02DB5B2A00DA
0x01326750: 2032491C02700A78401C002AF3D10021
0x01326760: 0170704770402DE90040A0E10150A0E1
0x01326770: 0F60A0E30A0055E30900003A0510A0E1
0x01326780: 0A00A0E33AF6FFEB066280E10510A0E1
0x01326790: 0A00A0E3BC0000EF0050A0E10A0055E3
0x013267A0: F5FFFF2A300085E20100C4E4020000EA
0x013267B0: 300085E20100C4E42662A0E10F5006E2
0x013267C0: 0A0055E3F9FFFF3A2E00A0E30100C4E4
0x013267D0: 7000A0E30100C4E46E00A0E30100C4E4
0x013267E0: 6700A0E30100C4E40000A0E30000C4E5
0x013267F0: 7080BDE8F0402DE9D8529FE50040A0E1
0x01326800: 0560A0E1460100EF0070A0E3000000EA
0x01326810: 0670A0E1006096E5000056E30E00000A
0x01326820: 040096E50410A0E1190000EF000050E3
0x01326830: F6FFFF1A000057E30400000A000096E5
0x01326840: 000087E5000095E5000086E5006085E5
0x01326850: 470100EF080096E5F080BDE8470100EF
0x01326860: 0000A0E3F080BDE8F0472DE964429FE5
0x01326870: 40DF4DE20050A0E1250EA0E10A0050E3
0x01326880: 0E00001A0510A0E10D00A0E1ABFFFFFA
0x01326890: 0D00A0E1D6FFFFEB0050B0E10000000A
0x013268A0: 4D0000EA0010A0E30D00A0E138FEFFEB
0x013268B0: 0050B0E15500001A0C029FE5470000EA
0x013268C0: 460100EF080094E5000000EA000090E5
0x013268D0: 000050E30800000A041090E5050051E1
0x013268E0: F9FFFF1A086090E5000056E3F6FFFF0A
0x013268F0: 470100EF0600A0E1380000EA470100EF
0x01326900: 040094E5000050E36D00000A2000A0E3
0x01326910: 4E0C80E3000055E11A00002A8000A0E3
0x01326920: A8A19FE5031005E28110A0E13091A0E1
0x01326930: 040094E5A960A0E1257180E00080D7E5
0x01326940: 080019E11100000A080016E10D00000A
0x01326950: 0A10A0E10D00A0E178FFFFFA0510A0E1
0x01326960: 7FFFFFEB0D00A0E1A1FFFFEB0050B0E1
0x01326970: 1900001A0010A0E30D00A0E104FEFFEB
0x01326980: 0050A0E1210000EA0000A0E3130000EA
0x01326990: 460100EF0000D7E5000089E10000C7E5
0x013269A0: 470100EF0A10A0E10D00A0E163FFFFFA
0x013269B0: 0510A0E16AFFFFEB0D00A0E18CFFFFEB
0x013269C0: 0050B0E10700000A460100EF0000D7E5
0x013269D0: 000086E10000C7E5470100EF0500A0E1
0x013269E0: 40DF8DE2F087BDE80010A0E30D00A0E1
0x013269F0: E7FDFFEB0050B0E1E2FFFF0A460100EF
0x01326A00: 0000D7E5000086E10000C7E5470100EF
0x01326A10: 0C00A0E3140000EF0060A0E10D00A0E1
0x01326A20: 1B0000EF010080E2140000EF040086E5
0x01326A30: 0D10A0E11A0000EF085086E5460100EF
0x01326A40: 000094E50050A0E30080A0E3000086E5
0x01326A50: 006084E50400A0E1004094E5000054E3
0x01326A60: 0100001A470100EF140000EA60109FE5
0x01326A70: 018088E2001091E5080051E1F4FFFF2A
0x01326A80: 005080E5470100EF080094E5000050E3
0x01326A90: 0300000A080090E5150000EF080094E5
0x01326AA0: 150000EF040094E5150000EF0400A0E1
0x01326AB0: 004094E5150000EF000054E3F1FFFF1A
0x01326AC0: 080096E540DF8DE2F087BDE8786E32A1
0x01326AD0: 04F3D9A8D4F1D9A844F6D9A830402DE9
0x01326AE0: 2C509FE58840A0E3040095E54C4D84E3
0x01326AF0: 000050E30200001A0400A0E1140000EF
0x01326B00: 040085E5040095E50410A0E11D0100EF
0x01326B10: 3080BDE844F6D9A8B9D366A079D166A0
0x01326B20: 79EA94A08422A3A0A5CE94A064030000
0x01326B30: 78F1D9A8886E32A11C010000DCF4D9A8
0x01326B40: DCF4D9A8303A5C5A42696E5C6574635C
0x01326B50: 456C665061636B2E6263666700000000
0x01326B60: 343A5C5A42696E5C6574635C456C6650
0x01326B70: 61636B2E626366670000000001014E6F
0x01326B80: 2066756E6374696F6E20696E206C6962
0x01326B90: A1000000256428253033582900000000
0x01326BA0: 7C25647C00000000416C744F70656E00
0x01326BB0: 4F70656E00000000656C66002573656C
0x01326BC0: 665F6269672E706E670000002573656C
0x01326BD0: 665F736D616C6C2E706E6700B86B32A1
0x01326BE0: 55000000FF08A205A86C32A1B06C32A1
0x01326BF0: B06B32A1A86B32A1FBC0FF7FA94332A1
0x01326C00: 0000000046756E6374696F6E20256420
0x01326C10: 636F6E666C6963742100000043616E27
0x01326C20: 742072656164206C6962726172792100
0x01326C30: 496C6C6567616C206C69627261727920
0x01326C40: 73697A65210000002A2E656C66000000
0x01326C50: 43616E74206F70656E20656C66000000
0x01326C60: 43616E7420666F756E6420656E747279
0x01326C70: 000000004C445F4C4942524152595F50
0x01326C80: 41544800303A5C5A42696E5C6C69625C
0x01326C90: 3B343A5C5A42696E5C6C69625C3B0000
0x01326CA0: 48454C504552000000F6D9A800000000
0x01326CB0: 20F6D9A8000000004572726F72206C6F
0x01326CC0: 6164696E672068617368746162000000
0x01326CD0: CDE520ECEEE3F320E7E0E3F0F3E7E8F2
0x01326CE0: FC2025732100000052656C6F63617469
0x01326CF0: 6F6E20525F41524D5F41425333322063
0x01326D00: 616E6E6F742072756E20776974686F75
0x01326D10: 742073796D7461620A00000052656C6F
0x01326D20: 636174696F6E20525F41524D5F414253
0x01326D30: 33322063616E6E6F742072756E207769
0x01326D40: 74686F7574207374727461620A000000
0x01326D50: 5B315D20556E646566696E6564207265
0x01326D60: 666572656E636520746F20602573270A
0x01326D70: 0000000052656C6F636174696F6E2052
0x01326D80: 5F41524D5F474C4F425F444154206361
0x01326D90: 6E6E6F742072756E20776974686F7574
0x01326DA0: 2073796D7461620A0000000052656C6F
0x01326DB0: 636174696F6E20525F41524D5F474C4F
0x01326DC0: 425F4441542063616E6E6F742072756E
0x01326DD0: 20776974686F7574207374727461620A
0x01326DE0: 000000005B325D20556E646566696E65
0x01326DF0: 64207265666572656E636520746F2060
0x01326E00: 2573270A00000000466174616C206572
0x01326E10: 726F722120556E6B6E6F776E20747970
0x01326E20: 652072656C6F636174696F6E20272564
0x01326E30: 27210A005B335D20556E646566696E65
0x01326E40: 64207265666572656E636520746F2060
0x01326E50: 2573270A000000007F454C4601010100
0x01326E60: 4C445F4C4942524152595F5041544800
0x01326E70: 312E322E350000000000000001000000
0x01326E80: 846E32A1FF00000001000000416C7068
0x01326E90: 612D6368616E207468726573686F6C64
0x01326EA0: 00000000000000000000000000000000
0x01326EB0: FF0000008000000001000000504E4720
0x01326EC0: 63616368652073697A65000000000000
0x01326ED0: 00000000000000000000000014000000
0x01326EE0: C8000000320000000500000044656661
0x01326EF0: 756C74206269742D6465707468000000
0x01326F00: 00000000000000000000000000000000
0x01326F10: 03000000020000003820626974730000
0x01326F20: 00000000000000000000000000000000
0x01326F30: 00000000000000003136206269747300
0x01326F40: 00000000000000000000000000000000
0x01326F50: 0000000000000000323420626974732B
0x01326F60: 616C7068610000000000000000000000
0x01326F70: 0000000000000000050000004C6F6164
0x01326F80: 206461656D6F6E20696E207375627072
0x01326F90: 6F630000000000000000000000000000
0x01326FA0: 02000000010000004E6F000000000000
0x01326FB0: 00000000000000000000000000000000
0x01326FC0: 00000000000000005965730000000000
0x01326FD0: 00000000000000000000000000000000
0x01326FE0: 000000000000000002000000496D6167
0x01326FF0: 6520666F6C6465722077617900000000
0x01327000: 00000000000000000000000000000000
0x01327010: 7F000000343A5C5A42696E5C696D675C
0x01327020: 00000000000000000000000000000000
0x01327030: 00000000000000000000000000000000
0x01327040: 00000000000000000000000000000000
0x01327050: 00000000000000000000000000000000
0x01327060: 00000000000000000000000000000000
0x01327070: 00000000000000000000000000000000
0x01327080: 00000000000000000000000000000000
0x01327090: 00000000020000004461656D6F6E7320
0x013270A0: 666F6C64657220776179000000000000
0x013270B0: 0000000000000000000000007F000000
0x013270C0: 343A5C5A42696E5C4461656D6F6E735C
0x013270D0: 00000000000000000000000000000000
0x013270E0: 00000000000000000000000000000000
0x013270F0: 00000000000000000000000000000000
0x01327100: 00000000000000000000000000000000
0x01327110: 00000000000000000000000000000000
0x01327120: 00000000000000000000000000000000
0x01327130: 00000000000000000000000000000000
0x01327140: 020000007377692E626C696220776179
0x01327150: 00000000000000000000000000000000
0x01327160: 00000000000000007F000000343A5C5A
0x01327170: 42696E5C7377692E626C696200000000
0x01327180: 00000000000000000000000000000000
0x01327190: 00000000000000000000000000000000
0x013271A0: 00000000000000000000000000000000
0x013271B0: 00000000000000000000000000000000
0x013271C0: 00000000000000000000000000000000
0x013271D0: 00000000000000000000000000000000
0x013271E0: 000000000000000000000000
#pragma disable old_equal_ff
